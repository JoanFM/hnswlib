// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jina.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_jina_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_jina_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_jina_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_jina_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jina_2eproto;
namespace jina {
class DenseNdArrayProto;
class DenseNdArrayProtoDefaultTypeInternal;
extern DenseNdArrayProtoDefaultTypeInternal _DenseNdArrayProto_default_instance_;
class DocumentArrayProto;
class DocumentArrayProtoDefaultTypeInternal;
extern DocumentArrayProtoDefaultTypeInternal _DocumentArrayProto_default_instance_;
class DocumentProto;
class DocumentProtoDefaultTypeInternal;
extern DocumentProtoDefaultTypeInternal _DocumentProto_default_instance_;
class DocumentProto_EvaluationsEntry_DoNotUse;
class DocumentProto_EvaluationsEntry_DoNotUseDefaultTypeInternal;
extern DocumentProto_EvaluationsEntry_DoNotUseDefaultTypeInternal _DocumentProto_EvaluationsEntry_DoNotUse_default_instance_;
class DocumentProto_ScoresEntry_DoNotUse;
class DocumentProto_ScoresEntry_DoNotUseDefaultTypeInternal;
extern DocumentProto_ScoresEntry_DoNotUseDefaultTypeInternal _DocumentProto_ScoresEntry_DoNotUse_default_instance_;
class EnvelopeProto;
class EnvelopeProtoDefaultTypeInternal;
extern EnvelopeProtoDefaultTypeInternal _EnvelopeProto_default_instance_;
class EnvelopeProto_CompressConfigProto;
class EnvelopeProto_CompressConfigProtoDefaultTypeInternal;
extern EnvelopeProto_CompressConfigProtoDefaultTypeInternal _EnvelopeProto_CompressConfigProto_default_instance_;
class EnvelopeProto_VersionProto;
class EnvelopeProto_VersionProtoDefaultTypeInternal;
extern EnvelopeProto_VersionProtoDefaultTypeInternal _EnvelopeProto_VersionProto_default_instance_;
class GraphProto;
class GraphProtoDefaultTypeInternal;
extern GraphProtoDefaultTypeInternal _GraphProto_default_instance_;
class HeaderProto;
class HeaderProtoDefaultTypeInternal;
extern HeaderProtoDefaultTypeInternal _HeaderProto_default_instance_;
class MessageProto;
class MessageProtoDefaultTypeInternal;
extern MessageProtoDefaultTypeInternal _MessageProto_default_instance_;
class NamedScoreProto;
class NamedScoreProtoDefaultTypeInternal;
extern NamedScoreProtoDefaultTypeInternal _NamedScoreProto_default_instance_;
class NdArrayProto;
class NdArrayProtoDefaultTypeInternal;
extern NdArrayProtoDefaultTypeInternal _NdArrayProto_default_instance_;
class RequestProto;
class RequestProtoDefaultTypeInternal;
extern RequestProtoDefaultTypeInternal _RequestProto_default_instance_;
class RequestProto_ControlRequestProto;
class RequestProto_ControlRequestProtoDefaultTypeInternal;
extern RequestProto_ControlRequestProtoDefaultTypeInternal _RequestProto_ControlRequestProto_default_instance_;
class RequestProto_DataRequestProto;
class RequestProto_DataRequestProtoDefaultTypeInternal;
extern RequestProto_DataRequestProtoDefaultTypeInternal _RequestProto_DataRequestProto_default_instance_;
class RouteProto;
class RouteProtoDefaultTypeInternal;
extern RouteProtoDefaultTypeInternal _RouteProto_default_instance_;
class RoutingEdgeProto;
class RoutingEdgeProtoDefaultTypeInternal;
extern RoutingEdgeProtoDefaultTypeInternal _RoutingEdgeProto_default_instance_;
class RoutingTableProto;
class RoutingTableProtoDefaultTypeInternal;
extern RoutingTableProtoDefaultTypeInternal _RoutingTableProto_default_instance_;
class RoutingTableProto_PodsEntry_DoNotUse;
class RoutingTableProto_PodsEntry_DoNotUseDefaultTypeInternal;
extern RoutingTableProto_PodsEntry_DoNotUseDefaultTypeInternal _RoutingTableProto_PodsEntry_DoNotUse_default_instance_;
class SparseNdArrayProto;
class SparseNdArrayProtoDefaultTypeInternal;
extern SparseNdArrayProtoDefaultTypeInternal _SparseNdArrayProto_default_instance_;
class StatusProto;
class StatusProtoDefaultTypeInternal;
extern StatusProtoDefaultTypeInternal _StatusProto_default_instance_;
class StatusProto_ExceptionProto;
class StatusProto_ExceptionProtoDefaultTypeInternal;
extern StatusProto_ExceptionProtoDefaultTypeInternal _StatusProto_ExceptionProto_default_instance_;
class TargetPodProto;
class TargetPodProtoDefaultTypeInternal;
extern TargetPodProtoDefaultTypeInternal _TargetPodProto_default_instance_;
}  // namespace jina
PROTOBUF_NAMESPACE_OPEN
template<> ::jina::DenseNdArrayProto* Arena::CreateMaybeMessage<::jina::DenseNdArrayProto>(Arena*);
template<> ::jina::DocumentArrayProto* Arena::CreateMaybeMessage<::jina::DocumentArrayProto>(Arena*);
template<> ::jina::DocumentProto* Arena::CreateMaybeMessage<::jina::DocumentProto>(Arena*);
template<> ::jina::DocumentProto_EvaluationsEntry_DoNotUse* Arena::CreateMaybeMessage<::jina::DocumentProto_EvaluationsEntry_DoNotUse>(Arena*);
template<> ::jina::DocumentProto_ScoresEntry_DoNotUse* Arena::CreateMaybeMessage<::jina::DocumentProto_ScoresEntry_DoNotUse>(Arena*);
template<> ::jina::EnvelopeProto* Arena::CreateMaybeMessage<::jina::EnvelopeProto>(Arena*);
template<> ::jina::EnvelopeProto_CompressConfigProto* Arena::CreateMaybeMessage<::jina::EnvelopeProto_CompressConfigProto>(Arena*);
template<> ::jina::EnvelopeProto_VersionProto* Arena::CreateMaybeMessage<::jina::EnvelopeProto_VersionProto>(Arena*);
template<> ::jina::GraphProto* Arena::CreateMaybeMessage<::jina::GraphProto>(Arena*);
template<> ::jina::HeaderProto* Arena::CreateMaybeMessage<::jina::HeaderProto>(Arena*);
template<> ::jina::MessageProto* Arena::CreateMaybeMessage<::jina::MessageProto>(Arena*);
template<> ::jina::NamedScoreProto* Arena::CreateMaybeMessage<::jina::NamedScoreProto>(Arena*);
template<> ::jina::NdArrayProto* Arena::CreateMaybeMessage<::jina::NdArrayProto>(Arena*);
template<> ::jina::RequestProto* Arena::CreateMaybeMessage<::jina::RequestProto>(Arena*);
template<> ::jina::RequestProto_ControlRequestProto* Arena::CreateMaybeMessage<::jina::RequestProto_ControlRequestProto>(Arena*);
template<> ::jina::RequestProto_DataRequestProto* Arena::CreateMaybeMessage<::jina::RequestProto_DataRequestProto>(Arena*);
template<> ::jina::RouteProto* Arena::CreateMaybeMessage<::jina::RouteProto>(Arena*);
template<> ::jina::RoutingEdgeProto* Arena::CreateMaybeMessage<::jina::RoutingEdgeProto>(Arena*);
template<> ::jina::RoutingTableProto* Arena::CreateMaybeMessage<::jina::RoutingTableProto>(Arena*);
template<> ::jina::RoutingTableProto_PodsEntry_DoNotUse* Arena::CreateMaybeMessage<::jina::RoutingTableProto_PodsEntry_DoNotUse>(Arena*);
template<> ::jina::SparseNdArrayProto* Arena::CreateMaybeMessage<::jina::SparseNdArrayProto>(Arena*);
template<> ::jina::StatusProto* Arena::CreateMaybeMessage<::jina::StatusProto>(Arena*);
template<> ::jina::StatusProto_ExceptionProto* Arena::CreateMaybeMessage<::jina::StatusProto_ExceptionProto>(Arena*);
template<> ::jina::TargetPodProto* Arena::CreateMaybeMessage<::jina::TargetPodProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jina {

enum StatusProto_StatusCode : int {
  StatusProto_StatusCode_SUCCESS = 0,
  StatusProto_StatusCode_PENDING = 1,
  StatusProto_StatusCode_READY = 2,
  StatusProto_StatusCode_ERROR = 3,
  StatusProto_StatusCode_ERROR_DUPLICATE = 4,
  StatusProto_StatusCode_ERROR_NOTALLOWED = 5,
  StatusProto_StatusCode_ERROR_CHAINED = 6,
  StatusProto_StatusCode_StatusProto_StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatusProto_StatusCode_StatusProto_StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusProto_StatusCode_IsValid(int value);
constexpr StatusProto_StatusCode StatusProto_StatusCode_StatusCode_MIN = StatusProto_StatusCode_SUCCESS;
constexpr StatusProto_StatusCode StatusProto_StatusCode_StatusCode_MAX = StatusProto_StatusCode_ERROR_CHAINED;
constexpr int StatusProto_StatusCode_StatusCode_ARRAYSIZE = StatusProto_StatusCode_StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusProto_StatusCode_descriptor();
template<typename T>
inline const std::string& StatusProto_StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusProto_StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusProto_StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusProto_StatusCode_descriptor(), enum_t_value);
}
inline bool StatusProto_StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusProto_StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusProto_StatusCode>(
    StatusProto_StatusCode_descriptor(), name, value);
}
enum RequestProto_ControlRequestProto_Command : int {
  RequestProto_ControlRequestProto_Command_TERMINATE = 0,
  RequestProto_ControlRequestProto_Command_STATUS = 1,
  RequestProto_ControlRequestProto_Command_IDLE = 2,
  RequestProto_ControlRequestProto_Command_CANCEL = 3,
  RequestProto_ControlRequestProto_Command_SCALE = 4,
  RequestProto_ControlRequestProto_Command_ACTIVATE = 5,
  RequestProto_ControlRequestProto_Command_DEACTIVATE = 6,
  RequestProto_ControlRequestProto_Command_RequestProto_ControlRequestProto_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestProto_ControlRequestProto_Command_RequestProto_ControlRequestProto_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestProto_ControlRequestProto_Command_IsValid(int value);
constexpr RequestProto_ControlRequestProto_Command RequestProto_ControlRequestProto_Command_Command_MIN = RequestProto_ControlRequestProto_Command_TERMINATE;
constexpr RequestProto_ControlRequestProto_Command RequestProto_ControlRequestProto_Command_Command_MAX = RequestProto_ControlRequestProto_Command_DEACTIVATE;
constexpr int RequestProto_ControlRequestProto_Command_Command_ARRAYSIZE = RequestProto_ControlRequestProto_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestProto_ControlRequestProto_Command_descriptor();
template<typename T>
inline const std::string& RequestProto_ControlRequestProto_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestProto_ControlRequestProto_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestProto_ControlRequestProto_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestProto_ControlRequestProto_Command_descriptor(), enum_t_value);
}
inline bool RequestProto_ControlRequestProto_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestProto_ControlRequestProto_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestProto_ControlRequestProto_Command>(
    RequestProto_ControlRequestProto_Command_descriptor(), name, value);
}
// ===================================================================

class DenseNdArrayProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.DenseNdArrayProto) */ {
 public:
  inline DenseNdArrayProto() : DenseNdArrayProto(nullptr) {}
  virtual ~DenseNdArrayProto();

  DenseNdArrayProto(const DenseNdArrayProto& from);
  DenseNdArrayProto(DenseNdArrayProto&& from) noexcept
    : DenseNdArrayProto() {
    *this = ::std::move(from);
  }

  inline DenseNdArrayProto& operator=(const DenseNdArrayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseNdArrayProto& operator=(DenseNdArrayProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenseNdArrayProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseNdArrayProto* internal_default_instance() {
    return reinterpret_cast<const DenseNdArrayProto*>(
               &_DenseNdArrayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DenseNdArrayProto& a, DenseNdArrayProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseNdArrayProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenseNdArrayProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenseNdArrayProto* New() const final {
    return CreateMaybeMessage<DenseNdArrayProto>(nullptr);
  }

  DenseNdArrayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenseNdArrayProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenseNdArrayProto& from);
  void MergeFrom(const DenseNdArrayProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseNdArrayProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.DenseNdArrayProto";
  }
  protected:
  explicit DenseNdArrayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kBufferFieldNumber = 1,
    kDtypeFieldNumber = 3,
  };
  // repeated uint32 shape = 2;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shape();

  // bytes buffer = 1;
  void clear_buffer();
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // string dtype = 3;
  void clear_dtype();
  const std::string& dtype() const;
  void set_dtype(const std::string& value);
  void set_dtype(std::string&& value);
  void set_dtype(const char* value);
  void set_dtype(const char* value, size_t size);
  std::string* mutable_dtype();
  std::string* release_dtype();
  void set_allocated_dtype(std::string* dtype);
  private:
  const std::string& _internal_dtype() const;
  void _internal_set_dtype(const std::string& value);
  std::string* _internal_mutable_dtype();
  public:

  // @@protoc_insertion_point(class_scope:jina.DenseNdArrayProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class NdArrayProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.NdArrayProto) */ {
 public:
  inline NdArrayProto() : NdArrayProto(nullptr) {}
  virtual ~NdArrayProto();

  NdArrayProto(const NdArrayProto& from);
  NdArrayProto(NdArrayProto&& from) noexcept
    : NdArrayProto() {
    *this = ::std::move(from);
  }

  inline NdArrayProto& operator=(const NdArrayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NdArrayProto& operator=(NdArrayProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NdArrayProto& default_instance();

  enum ContentCase {
    kDense = 1,
    kSparse = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NdArrayProto* internal_default_instance() {
    return reinterpret_cast<const NdArrayProto*>(
               &_NdArrayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NdArrayProto& a, NdArrayProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NdArrayProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NdArrayProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NdArrayProto* New() const final {
    return CreateMaybeMessage<NdArrayProto>(nullptr);
  }

  NdArrayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NdArrayProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NdArrayProto& from);
  void MergeFrom(const NdArrayProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NdArrayProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.NdArrayProto";
  }
  protected:
  explicit NdArrayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClsNameFieldNumber = 3,
    kParametersFieldNumber = 4,
    kDenseFieldNumber = 1,
    kSparseFieldNumber = 2,
  };
  // string cls_name = 3;
  void clear_cls_name();
  const std::string& cls_name() const;
  void set_cls_name(const std::string& value);
  void set_cls_name(std::string&& value);
  void set_cls_name(const char* value);
  void set_cls_name(const char* value, size_t size);
  std::string* mutable_cls_name();
  std::string* release_cls_name();
  void set_allocated_cls_name(std::string* cls_name);
  private:
  const std::string& _internal_cls_name() const;
  void _internal_set_cls_name(const std::string& value);
  std::string* _internal_mutable_cls_name();
  public:

  // .google.protobuf.Struct parameters = 4;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const PROTOBUF_NAMESPACE_ID::Struct& parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_parameters();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_parameters();
  void set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      PROTOBUF_NAMESPACE_ID::Struct* parameters);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_parameters();

  // .jina.DenseNdArrayProto dense = 1;
  bool has_dense() const;
  private:
  bool _internal_has_dense() const;
  public:
  void clear_dense();
  const ::jina::DenseNdArrayProto& dense() const;
  ::jina::DenseNdArrayProto* release_dense();
  ::jina::DenseNdArrayProto* mutable_dense();
  void set_allocated_dense(::jina::DenseNdArrayProto* dense);
  private:
  const ::jina::DenseNdArrayProto& _internal_dense() const;
  ::jina::DenseNdArrayProto* _internal_mutable_dense();
  public:
  void unsafe_arena_set_allocated_dense(
      ::jina::DenseNdArrayProto* dense);
  ::jina::DenseNdArrayProto* unsafe_arena_release_dense();

  // .jina.SparseNdArrayProto sparse = 2;
  bool has_sparse() const;
  private:
  bool _internal_has_sparse() const;
  public:
  void clear_sparse();
  const ::jina::SparseNdArrayProto& sparse() const;
  ::jina::SparseNdArrayProto* release_sparse();
  ::jina::SparseNdArrayProto* mutable_sparse();
  void set_allocated_sparse(::jina::SparseNdArrayProto* sparse);
  private:
  const ::jina::SparseNdArrayProto& _internal_sparse() const;
  ::jina::SparseNdArrayProto* _internal_mutable_sparse();
  public:
  void unsafe_arena_set_allocated_sparse(
      ::jina::SparseNdArrayProto* sparse);
  ::jina::SparseNdArrayProto* unsafe_arena_release_sparse();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:jina.NdArrayProto)
 private:
  class _Internal;
  void set_has_dense();
  void set_has_sparse();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cls_name_;
  PROTOBUF_NAMESPACE_ID::Struct* parameters_;
  union ContentUnion {
    ContentUnion() {}
    ::jina::DenseNdArrayProto* dense_;
    ::jina::SparseNdArrayProto* sparse_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class SparseNdArrayProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.SparseNdArrayProto) */ {
 public:
  inline SparseNdArrayProto() : SparseNdArrayProto(nullptr) {}
  virtual ~SparseNdArrayProto();

  SparseNdArrayProto(const SparseNdArrayProto& from);
  SparseNdArrayProto(SparseNdArrayProto&& from) noexcept
    : SparseNdArrayProto() {
    *this = ::std::move(from);
  }

  inline SparseNdArrayProto& operator=(const SparseNdArrayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseNdArrayProto& operator=(SparseNdArrayProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparseNdArrayProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseNdArrayProto* internal_default_instance() {
    return reinterpret_cast<const SparseNdArrayProto*>(
               &_SparseNdArrayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SparseNdArrayProto& a, SparseNdArrayProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseNdArrayProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseNdArrayProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseNdArrayProto* New() const final {
    return CreateMaybeMessage<SparseNdArrayProto>(nullptr);
  }

  SparseNdArrayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseNdArrayProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseNdArrayProto& from);
  void MergeFrom(const SparseNdArrayProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseNdArrayProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.SparseNdArrayProto";
  }
  protected:
  explicit SparseNdArrayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 3,
    kIndicesFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated uint32 shape = 3;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shape();

  // .jina.DenseNdArrayProto indices = 1;
  bool has_indices() const;
  private:
  bool _internal_has_indices() const;
  public:
  void clear_indices();
  const ::jina::DenseNdArrayProto& indices() const;
  ::jina::DenseNdArrayProto* release_indices();
  ::jina::DenseNdArrayProto* mutable_indices();
  void set_allocated_indices(::jina::DenseNdArrayProto* indices);
  private:
  const ::jina::DenseNdArrayProto& _internal_indices() const;
  ::jina::DenseNdArrayProto* _internal_mutable_indices();
  public:
  void unsafe_arena_set_allocated_indices(
      ::jina::DenseNdArrayProto* indices);
  ::jina::DenseNdArrayProto* unsafe_arena_release_indices();

  // .jina.DenseNdArrayProto values = 2;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::jina::DenseNdArrayProto& values() const;
  ::jina::DenseNdArrayProto* release_values();
  ::jina::DenseNdArrayProto* mutable_values();
  void set_allocated_values(::jina::DenseNdArrayProto* values);
  private:
  const ::jina::DenseNdArrayProto& _internal_values() const;
  ::jina::DenseNdArrayProto* _internal_mutable_values();
  public:
  void unsafe_arena_set_allocated_values(
      ::jina::DenseNdArrayProto* values);
  ::jina::DenseNdArrayProto* unsafe_arena_release_values();

  // @@protoc_insertion_point(class_scope:jina.SparseNdArrayProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::jina::DenseNdArrayProto* indices_;
  ::jina::DenseNdArrayProto* values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class NamedScoreProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.NamedScoreProto) */ {
 public:
  inline NamedScoreProto() : NamedScoreProto(nullptr) {}
  virtual ~NamedScoreProto();

  NamedScoreProto(const NamedScoreProto& from);
  NamedScoreProto(NamedScoreProto&& from) noexcept
    : NamedScoreProto() {
    *this = ::std::move(from);
  }

  inline NamedScoreProto& operator=(const NamedScoreProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedScoreProto& operator=(NamedScoreProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamedScoreProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedScoreProto* internal_default_instance() {
    return reinterpret_cast<const NamedScoreProto*>(
               &_NamedScoreProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NamedScoreProto& a, NamedScoreProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedScoreProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedScoreProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedScoreProto* New() const final {
    return CreateMaybeMessage<NamedScoreProto>(nullptr);
  }

  NamedScoreProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedScoreProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedScoreProto& from);
  void MergeFrom(const NamedScoreProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedScoreProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.NamedScoreProto";
  }
  protected:
  explicit NamedScoreProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperandsFieldNumber = 4,
    kOpNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kRefIdFieldNumber = 5,
    kValueFieldNumber = 1,
  };
  // repeated .jina.NamedScoreProto operands = 4;
  int operands_size() const;
  private:
  int _internal_operands_size() const;
  public:
  void clear_operands();
  ::jina::NamedScoreProto* mutable_operands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::NamedScoreProto >*
      mutable_operands();
  private:
  const ::jina::NamedScoreProto& _internal_operands(int index) const;
  ::jina::NamedScoreProto* _internal_add_operands();
  public:
  const ::jina::NamedScoreProto& operands(int index) const;
  ::jina::NamedScoreProto* add_operands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::NamedScoreProto >&
      operands() const;

  // string op_name = 2;
  void clear_op_name();
  const std::string& op_name() const;
  void set_op_name(const std::string& value);
  void set_op_name(std::string&& value);
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  std::string* mutable_op_name();
  std::string* release_op_name();
  void set_allocated_op_name(std::string* op_name);
  private:
  const std::string& _internal_op_name() const;
  void _internal_set_op_name(const std::string& value);
  std::string* _internal_mutable_op_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string ref_id = 5;
  void clear_ref_id();
  const std::string& ref_id() const;
  void set_ref_id(const std::string& value);
  void set_ref_id(std::string&& value);
  void set_ref_id(const char* value);
  void set_ref_id(const char* value, size_t size);
  std::string* mutable_ref_id();
  std::string* release_ref_id();
  void set_allocated_ref_id(std::string* ref_id);
  private:
  const std::string& _internal_ref_id() const;
  void _internal_set_ref_id(const std::string& value);
  std::string* _internal_mutable_ref_id();
  public:

  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:jina.NamedScoreProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::NamedScoreProto > operands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_id_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class GraphProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.GraphProto) */ {
 public:
  inline GraphProto() : GraphProto(nullptr) {}
  virtual ~GraphProto();

  GraphProto(const GraphProto& from);
  GraphProto(GraphProto&& from) noexcept
    : GraphProto() {
    *this = ::std::move(from);
  }

  inline GraphProto& operator=(const GraphProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphProto& operator=(GraphProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphProto* internal_default_instance() {
    return reinterpret_cast<const GraphProto*>(
               &_GraphProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GraphProto& a, GraphProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphProto* New() const final {
    return CreateMaybeMessage<GraphProto>(nullptr);
  }

  GraphProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphProto& from);
  void MergeFrom(const GraphProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.GraphProto";
  }
  protected:
  explicit GraphProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdjacencyFieldNumber = 1,
    kEdgeFeaturesFieldNumber = 2,
    kUndirectedFieldNumber = 3,
  };
  // .jina.NdArrayProto adjacency = 1;
  bool has_adjacency() const;
  private:
  bool _internal_has_adjacency() const;
  public:
  void clear_adjacency();
  const ::jina::NdArrayProto& adjacency() const;
  ::jina::NdArrayProto* release_adjacency();
  ::jina::NdArrayProto* mutable_adjacency();
  void set_allocated_adjacency(::jina::NdArrayProto* adjacency);
  private:
  const ::jina::NdArrayProto& _internal_adjacency() const;
  ::jina::NdArrayProto* _internal_mutable_adjacency();
  public:
  void unsafe_arena_set_allocated_adjacency(
      ::jina::NdArrayProto* adjacency);
  ::jina::NdArrayProto* unsafe_arena_release_adjacency();

  // .google.protobuf.Struct edge_features = 2;
  bool has_edge_features() const;
  private:
  bool _internal_has_edge_features() const;
  public:
  void clear_edge_features();
  const PROTOBUF_NAMESPACE_ID::Struct& edge_features() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_edge_features();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_edge_features();
  void set_allocated_edge_features(PROTOBUF_NAMESPACE_ID::Struct* edge_features);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_edge_features() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_edge_features();
  public:
  void unsafe_arena_set_allocated_edge_features(
      PROTOBUF_NAMESPACE_ID::Struct* edge_features);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_edge_features();

  // bool undirected = 3;
  void clear_undirected();
  bool undirected() const;
  void set_undirected(bool value);
  private:
  bool _internal_undirected() const;
  void _internal_set_undirected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:jina.GraphProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::jina::NdArrayProto* adjacency_;
  PROTOBUF_NAMESPACE_ID::Struct* edge_features_;
  bool undirected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class DocumentProto_ScoresEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DocumentProto_ScoresEntry_DoNotUse, 
    std::string, ::jina::NamedScoreProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DocumentProto_ScoresEntry_DoNotUse, 
    std::string, ::jina::NamedScoreProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DocumentProto_ScoresEntry_DoNotUse();
  explicit DocumentProto_ScoresEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DocumentProto_ScoresEntry_DoNotUse& other);
  static const DocumentProto_ScoresEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DocumentProto_ScoresEntry_DoNotUse*>(&_DocumentProto_ScoresEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "jina.DocumentProto.ScoresEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class DocumentProto_EvaluationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DocumentProto_EvaluationsEntry_DoNotUse, 
    std::string, ::jina::NamedScoreProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DocumentProto_EvaluationsEntry_DoNotUse, 
    std::string, ::jina::NamedScoreProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DocumentProto_EvaluationsEntry_DoNotUse();
  explicit DocumentProto_EvaluationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DocumentProto_EvaluationsEntry_DoNotUse& other);
  static const DocumentProto_EvaluationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DocumentProto_EvaluationsEntry_DoNotUse*>(&_DocumentProto_EvaluationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "jina.DocumentProto.EvaluationsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class DocumentProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.DocumentProto) */ {
 public:
  inline DocumentProto() : DocumentProto(nullptr) {}
  virtual ~DocumentProto();

  DocumentProto(const DocumentProto& from);
  DocumentProto(DocumentProto&& from) noexcept
    : DocumentProto() {
    *this = ::std::move(from);
  }

  inline DocumentProto& operator=(const DocumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentProto& operator=(DocumentProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DocumentProto& default_instance();

  enum ContentCase {
    kBuffer = 3,
    kBlob = 12,
    kText = 13,
    kGraph = 27,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentProto* internal_default_instance() {
    return reinterpret_cast<const DocumentProto*>(
               &_DocumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DocumentProto& a, DocumentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentProto* New() const final {
    return CreateMaybeMessage<DocumentProto>(nullptr);
  }

  DocumentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentProto& from);
  void MergeFrom(const DocumentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.DocumentProto";
  }
  protected:
  explicit DocumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 4,
    kMatchesFieldNumber = 8,
    kLocationFieldNumber = 17,
    kScoresFieldNumber = 28,
    kEvaluationsFieldNumber = 29,
    kIdFieldNumber = 1,
    kUriFieldNumber = 9,
    kMimeTypeFieldNumber = 10,
    kParentIdFieldNumber = 16,
    kModalityFieldNumber = 21,
    kTagsFieldNumber = 11,
    kEmbeddingFieldNumber = 19,
    kWeightFieldNumber = 5,
    kGranularityFieldNumber = 14,
    kOffsetFieldNumber = 18,
    kAdjacencyFieldNumber = 22,
    kBufferFieldNumber = 3,
    kBlobFieldNumber = 12,
    kTextFieldNumber = 13,
    kGraphFieldNumber = 27,
  };
  // repeated .jina.DocumentProto chunks = 4;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::jina::DocumentProto* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
      mutable_chunks();
  private:
  const ::jina::DocumentProto& _internal_chunks(int index) const;
  ::jina::DocumentProto* _internal_add_chunks();
  public:
  const ::jina::DocumentProto& chunks(int index) const;
  ::jina::DocumentProto* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
      chunks() const;

  // repeated .jina.DocumentProto matches = 8;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::jina::DocumentProto* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
      mutable_matches();
  private:
  const ::jina::DocumentProto& _internal_matches(int index) const;
  ::jina::DocumentProto* _internal_add_matches();
  public:
  const ::jina::DocumentProto& matches(int index) const;
  ::jina::DocumentProto* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
      matches() const;

  // repeated float location = 17;
  int location_size() const;
  private:
  int _internal_location_size() const;
  public:
  void clear_location();
  private:
  float _internal_location(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_location() const;
  void _internal_add_location(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_location();
  public:
  float location(int index) const;
  void set_location(int index, float value);
  void add_location(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      location() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_location();

  // map<string, .jina.NamedScoreProto> scores = 28;
  int scores_size() const;
  private:
  int _internal_scores_size() const;
  public:
  void clear_scores();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >&
      _internal_scores() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >*
      _internal_mutable_scores();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >&
      scores() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >*
      mutable_scores();

  // map<string, .jina.NamedScoreProto> evaluations = 29;
  int evaluations_size() const;
  private:
  int _internal_evaluations_size() const;
  public:
  void clear_evaluations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >&
      _internal_evaluations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >*
      _internal_mutable_evaluations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >&
      evaluations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >*
      mutable_evaluations();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string uri = 9;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string mime_type = 10;
  void clear_mime_type();
  const std::string& mime_type() const;
  void set_mime_type(const std::string& value);
  void set_mime_type(std::string&& value);
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  std::string* mutable_mime_type();
  std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // string parent_id = 16;
  void clear_parent_id();
  const std::string& parent_id() const;
  void set_parent_id(const std::string& value);
  void set_parent_id(std::string&& value);
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  std::string* mutable_parent_id();
  std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // string modality = 21;
  void clear_modality();
  const std::string& modality() const;
  void set_modality(const std::string& value);
  void set_modality(std::string&& value);
  void set_modality(const char* value);
  void set_modality(const char* value, size_t size);
  std::string* mutable_modality();
  std::string* release_modality();
  void set_allocated_modality(std::string* modality);
  private:
  const std::string& _internal_modality() const;
  void _internal_set_modality(const std::string& value);
  std::string* _internal_mutable_modality();
  public:

  // .google.protobuf.Struct tags = 11;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const PROTOBUF_NAMESPACE_ID::Struct& tags() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_tags();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_tags();
  void set_allocated_tags(PROTOBUF_NAMESPACE_ID::Struct* tags);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_tags() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_tags();
  public:
  void unsafe_arena_set_allocated_tags(
      PROTOBUF_NAMESPACE_ID::Struct* tags);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_tags();

  // .jina.NdArrayProto embedding = 19;
  bool has_embedding() const;
  private:
  bool _internal_has_embedding() const;
  public:
  void clear_embedding();
  const ::jina::NdArrayProto& embedding() const;
  ::jina::NdArrayProto* release_embedding();
  ::jina::NdArrayProto* mutable_embedding();
  void set_allocated_embedding(::jina::NdArrayProto* embedding);
  private:
  const ::jina::NdArrayProto& _internal_embedding() const;
  ::jina::NdArrayProto* _internal_mutable_embedding();
  public:
  void unsafe_arena_set_allocated_embedding(
      ::jina::NdArrayProto* embedding);
  ::jina::NdArrayProto* unsafe_arena_release_embedding();

  // float weight = 5;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // uint32 granularity = 14;
  void clear_granularity();
  ::PROTOBUF_NAMESPACE_ID::uint32 granularity() const;
  void set_granularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_granularity() const;
  void _internal_set_granularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float offset = 18;
  void clear_offset();
  float offset() const;
  void set_offset(float value);
  private:
  float _internal_offset() const;
  void _internal_set_offset(float value);
  public:

  // uint32 adjacency = 22;
  void clear_adjacency();
  ::PROTOBUF_NAMESPACE_ID::uint32 adjacency() const;
  void set_adjacency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_adjacency() const;
  void _internal_set_adjacency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bytes buffer = 3;
  private:
  bool _internal_has_buffer() const;
  public:
  void clear_buffer();
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // .jina.NdArrayProto blob = 12;
  bool has_blob() const;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const ::jina::NdArrayProto& blob() const;
  ::jina::NdArrayProto* release_blob();
  ::jina::NdArrayProto* mutable_blob();
  void set_allocated_blob(::jina::NdArrayProto* blob);
  private:
  const ::jina::NdArrayProto& _internal_blob() const;
  ::jina::NdArrayProto* _internal_mutable_blob();
  public:
  void unsafe_arena_set_allocated_blob(
      ::jina::NdArrayProto* blob);
  ::jina::NdArrayProto* unsafe_arena_release_blob();

  // string text = 13;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .jina.GraphProto graph = 27;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::jina::GraphProto& graph() const;
  ::jina::GraphProto* release_graph();
  ::jina::GraphProto* mutable_graph();
  void set_allocated_graph(::jina::GraphProto* graph);
  private:
  const ::jina::GraphProto& _internal_graph() const;
  ::jina::GraphProto* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::jina::GraphProto* graph);
  ::jina::GraphProto* unsafe_arena_release_graph();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:jina.DocumentProto)
 private:
  class _Internal;
  void set_has_buffer();
  void set_has_blob();
  void set_has_text();
  void set_has_graph();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto > chunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto > matches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > location_;
  mutable std::atomic<int> _location_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DocumentProto_ScoresEntry_DoNotUse,
      std::string, ::jina::NamedScoreProto,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > scores_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DocumentProto_EvaluationsEntry_DoNotUse,
      std::string, ::jina::NamedScoreProto,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > evaluations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modality_;
  PROTOBUF_NAMESPACE_ID::Struct* tags_;
  ::jina::NdArrayProto* embedding_;
  float weight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 granularity_;
  float offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 adjacency_;
  union ContentUnion {
    ContentUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
    ::jina::NdArrayProto* blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::jina::GraphProto* graph_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class RouteProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.RouteProto) */ {
 public:
  inline RouteProto() : RouteProto(nullptr) {}
  virtual ~RouteProto();

  RouteProto(const RouteProto& from);
  RouteProto(RouteProto&& from) noexcept
    : RouteProto() {
    *this = ::std::move(from);
  }

  inline RouteProto& operator=(const RouteProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteProto& operator=(RouteProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteProto* internal_default_instance() {
    return reinterpret_cast<const RouteProto*>(
               &_RouteProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RouteProto& a, RouteProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteProto* New() const final {
    return CreateMaybeMessage<RouteProto>(nullptr);
  }

  RouteProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteProto& from);
  void MergeFrom(const RouteProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.RouteProto";
  }
  protected:
  explicit RouteProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodFieldNumber = 1,
    kPodIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string pod = 1;
  void clear_pod();
  const std::string& pod() const;
  void set_pod(const std::string& value);
  void set_pod(std::string&& value);
  void set_pod(const char* value);
  void set_pod(const char* value, size_t size);
  std::string* mutable_pod();
  std::string* release_pod();
  void set_allocated_pod(std::string* pod);
  private:
  const std::string& _internal_pod() const;
  void _internal_set_pod(const std::string& value);
  std::string* _internal_mutable_pod();
  public:

  // string pod_id = 2;
  void clear_pod_id();
  const std::string& pod_id() const;
  void set_pod_id(const std::string& value);
  void set_pod_id(std::string&& value);
  void set_pod_id(const char* value);
  void set_pod_id(const char* value, size_t size);
  std::string* mutable_pod_id();
  std::string* release_pod_id();
  void set_allocated_pod_id(std::string* pod_id);
  private:
  const std::string& _internal_pod_id() const;
  void _internal_set_pod_id(const std::string& value);
  std::string* _internal_mutable_pod_id();
  public:

  // .google.protobuf.Timestamp start_time = 3;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 4;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .jina.StatusProto status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::jina::StatusProto& status() const;
  ::jina::StatusProto* release_status();
  ::jina::StatusProto* mutable_status();
  void set_allocated_status(::jina::StatusProto* status);
  private:
  const ::jina::StatusProto& _internal_status() const;
  ::jina::StatusProto* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::jina::StatusProto* status);
  ::jina::StatusProto* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:jina.RouteProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::jina::StatusProto* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class TargetPodProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.TargetPodProto) */ {
 public:
  inline TargetPodProto() : TargetPodProto(nullptr) {}
  virtual ~TargetPodProto();

  TargetPodProto(const TargetPodProto& from);
  TargetPodProto(TargetPodProto&& from) noexcept
    : TargetPodProto() {
    *this = ::std::move(from);
  }

  inline TargetPodProto& operator=(const TargetPodProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetPodProto& operator=(TargetPodProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetPodProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetPodProto* internal_default_instance() {
    return reinterpret_cast<const TargetPodProto*>(
               &_TargetPodProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TargetPodProto& a, TargetPodProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetPodProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetPodProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetPodProto* New() const final {
    return CreateMaybeMessage<TargetPodProto>(nullptr);
  }

  TargetPodProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetPodProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetPodProto& from);
  void MergeFrom(const TargetPodProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetPodProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.TargetPodProto";
  }
  protected:
  explicit TargetPodProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutEdgesFieldNumber = 4,
    kHostFieldNumber = 1,
    kTargetIdentityFieldNumber = 5,
    kPortFieldNumber = 2,
    kExpectedPartsFieldNumber = 3,
    kPortOutFieldNumber = 6,
  };
  // repeated .jina.RoutingEdgeProto out_edges = 4;
  int out_edges_size() const;
  private:
  int _internal_out_edges_size() const;
  public:
  void clear_out_edges();
  ::jina::RoutingEdgeProto* mutable_out_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RoutingEdgeProto >*
      mutable_out_edges();
  private:
  const ::jina::RoutingEdgeProto& _internal_out_edges(int index) const;
  ::jina::RoutingEdgeProto* _internal_add_out_edges();
  public:
  const ::jina::RoutingEdgeProto& out_edges(int index) const;
  ::jina::RoutingEdgeProto* add_out_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RoutingEdgeProto >&
      out_edges() const;

  // string host = 1;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string target_identity = 5;
  void clear_target_identity();
  const std::string& target_identity() const;
  void set_target_identity(const std::string& value);
  void set_target_identity(std::string&& value);
  void set_target_identity(const char* value);
  void set_target_identity(const char* value, size_t size);
  std::string* mutable_target_identity();
  std::string* release_target_identity();
  void set_allocated_target_identity(std::string* target_identity);
  private:
  const std::string& _internal_target_identity() const;
  void _internal_set_target_identity(const std::string& value);
  std::string* _internal_mutable_target_identity();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expected_parts = 3;
  void clear_expected_parts();
  ::PROTOBUF_NAMESPACE_ID::uint32 expected_parts() const;
  void set_expected_parts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expected_parts() const;
  void _internal_set_expected_parts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port_out = 6;
  void clear_port_out();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_out() const;
  void set_port_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_out() const;
  void _internal_set_port_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:jina.TargetPodProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RoutingEdgeProto > out_edges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_identity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expected_parts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class RoutingEdgeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.RoutingEdgeProto) */ {
 public:
  inline RoutingEdgeProto() : RoutingEdgeProto(nullptr) {}
  virtual ~RoutingEdgeProto();

  RoutingEdgeProto(const RoutingEdgeProto& from);
  RoutingEdgeProto(RoutingEdgeProto&& from) noexcept
    : RoutingEdgeProto() {
    *this = ::std::move(from);
  }

  inline RoutingEdgeProto& operator=(const RoutingEdgeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingEdgeProto& operator=(RoutingEdgeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingEdgeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingEdgeProto* internal_default_instance() {
    return reinterpret_cast<const RoutingEdgeProto*>(
               &_RoutingEdgeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RoutingEdgeProto& a, RoutingEdgeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingEdgeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingEdgeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingEdgeProto* New() const final {
    return CreateMaybeMessage<RoutingEdgeProto>(nullptr);
  }

  RoutingEdgeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingEdgeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingEdgeProto& from);
  void MergeFrom(const RoutingEdgeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingEdgeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.RoutingEdgeProto";
  }
  protected:
  explicit RoutingEdgeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodFieldNumber = 1,
    kSendAsBindFieldNumber = 2,
  };
  // string pod = 1;
  void clear_pod();
  const std::string& pod() const;
  void set_pod(const std::string& value);
  void set_pod(std::string&& value);
  void set_pod(const char* value);
  void set_pod(const char* value, size_t size);
  std::string* mutable_pod();
  std::string* release_pod();
  void set_allocated_pod(std::string* pod);
  private:
  const std::string& _internal_pod() const;
  void _internal_set_pod(const std::string& value);
  std::string* _internal_mutable_pod();
  public:

  // bool send_as_bind = 2;
  void clear_send_as_bind();
  bool send_as_bind() const;
  void set_send_as_bind(bool value);
  private:
  bool _internal_send_as_bind() const;
  void _internal_set_send_as_bind(bool value);
  public:

  // @@protoc_insertion_point(class_scope:jina.RoutingEdgeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_;
  bool send_as_bind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class RoutingTableProto_PodsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RoutingTableProto_PodsEntry_DoNotUse, 
    std::string, ::jina::TargetPodProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RoutingTableProto_PodsEntry_DoNotUse, 
    std::string, ::jina::TargetPodProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RoutingTableProto_PodsEntry_DoNotUse();
  explicit RoutingTableProto_PodsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RoutingTableProto_PodsEntry_DoNotUse& other);
  static const RoutingTableProto_PodsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RoutingTableProto_PodsEntry_DoNotUse*>(&_RoutingTableProto_PodsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "jina.RoutingTableProto.PodsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class RoutingTableProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.RoutingTableProto) */ {
 public:
  inline RoutingTableProto() : RoutingTableProto(nullptr) {}
  virtual ~RoutingTableProto();

  RoutingTableProto(const RoutingTableProto& from);
  RoutingTableProto(RoutingTableProto&& from) noexcept
    : RoutingTableProto() {
    *this = ::std::move(from);
  }

  inline RoutingTableProto& operator=(const RoutingTableProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingTableProto& operator=(RoutingTableProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingTableProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingTableProto* internal_default_instance() {
    return reinterpret_cast<const RoutingTableProto*>(
               &_RoutingTableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RoutingTableProto& a, RoutingTableProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingTableProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingTableProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingTableProto* New() const final {
    return CreateMaybeMessage<RoutingTableProto>(nullptr);
  }

  RoutingTableProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingTableProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingTableProto& from);
  void MergeFrom(const RoutingTableProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingTableProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.RoutingTableProto";
  }
  protected:
  explicit RoutingTableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPodsFieldNumber = 1,
    kActivePodFieldNumber = 2,
  };
  // map<string, .jina.TargetPodProto> pods = 1;
  int pods_size() const;
  private:
  int _internal_pods_size() const;
  public:
  void clear_pods();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::TargetPodProto >&
      _internal_pods() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::TargetPodProto >*
      _internal_mutable_pods();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::TargetPodProto >&
      pods() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::TargetPodProto >*
      mutable_pods();

  // string active_pod = 2;
  void clear_active_pod();
  const std::string& active_pod() const;
  void set_active_pod(const std::string& value);
  void set_active_pod(std::string&& value);
  void set_active_pod(const char* value);
  void set_active_pod(const char* value, size_t size);
  std::string* mutable_active_pod();
  std::string* release_active_pod();
  void set_allocated_active_pod(std::string* active_pod);
  private:
  const std::string& _internal_active_pod() const;
  void _internal_set_active_pod(const std::string& value);
  std::string* _internal_mutable_active_pod();
  public:

  // @@protoc_insertion_point(class_scope:jina.RoutingTableProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RoutingTableProto_PodsEntry_DoNotUse,
      std::string, ::jina::TargetPodProto,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > pods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_pod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class EnvelopeProto_VersionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.EnvelopeProto.VersionProto) */ {
 public:
  inline EnvelopeProto_VersionProto() : EnvelopeProto_VersionProto(nullptr) {}
  virtual ~EnvelopeProto_VersionProto();

  EnvelopeProto_VersionProto(const EnvelopeProto_VersionProto& from);
  EnvelopeProto_VersionProto(EnvelopeProto_VersionProto&& from) noexcept
    : EnvelopeProto_VersionProto() {
    *this = ::std::move(from);
  }

  inline EnvelopeProto_VersionProto& operator=(const EnvelopeProto_VersionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvelopeProto_VersionProto& operator=(EnvelopeProto_VersionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvelopeProto_VersionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvelopeProto_VersionProto* internal_default_instance() {
    return reinterpret_cast<const EnvelopeProto_VersionProto*>(
               &_EnvelopeProto_VersionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EnvelopeProto_VersionProto& a, EnvelopeProto_VersionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvelopeProto_VersionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvelopeProto_VersionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvelopeProto_VersionProto* New() const final {
    return CreateMaybeMessage<EnvelopeProto_VersionProto>(nullptr);
  }

  EnvelopeProto_VersionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvelopeProto_VersionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvelopeProto_VersionProto& from);
  void MergeFrom(const EnvelopeProto_VersionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvelopeProto_VersionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.EnvelopeProto.VersionProto";
  }
  protected:
  explicit EnvelopeProto_VersionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJinaFieldNumber = 1,
    kProtoFieldNumber = 2,
    kVcsFieldNumber = 3,
  };
  // string jina = 1;
  void clear_jina();
  const std::string& jina() const;
  void set_jina(const std::string& value);
  void set_jina(std::string&& value);
  void set_jina(const char* value);
  void set_jina(const char* value, size_t size);
  std::string* mutable_jina();
  std::string* release_jina();
  void set_allocated_jina(std::string* jina);
  private:
  const std::string& _internal_jina() const;
  void _internal_set_jina(const std::string& value);
  std::string* _internal_mutable_jina();
  public:

  // string proto = 2;
  void clear_proto();
  const std::string& proto() const;
  void set_proto(const std::string& value);
  void set_proto(std::string&& value);
  void set_proto(const char* value);
  void set_proto(const char* value, size_t size);
  std::string* mutable_proto();
  std::string* release_proto();
  void set_allocated_proto(std::string* proto);
  private:
  const std::string& _internal_proto() const;
  void _internal_set_proto(const std::string& value);
  std::string* _internal_mutable_proto();
  public:

  // string vcs = 3;
  void clear_vcs();
  const std::string& vcs() const;
  void set_vcs(const std::string& value);
  void set_vcs(std::string&& value);
  void set_vcs(const char* value);
  void set_vcs(const char* value, size_t size);
  std::string* mutable_vcs();
  std::string* release_vcs();
  void set_allocated_vcs(std::string* vcs);
  private:
  const std::string& _internal_vcs() const;
  void _internal_set_vcs(const std::string& value);
  std::string* _internal_mutable_vcs();
  public:

  // @@protoc_insertion_point(class_scope:jina.EnvelopeProto.VersionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jina_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vcs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class EnvelopeProto_CompressConfigProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.EnvelopeProto.CompressConfigProto) */ {
 public:
  inline EnvelopeProto_CompressConfigProto() : EnvelopeProto_CompressConfigProto(nullptr) {}
  virtual ~EnvelopeProto_CompressConfigProto();

  EnvelopeProto_CompressConfigProto(const EnvelopeProto_CompressConfigProto& from);
  EnvelopeProto_CompressConfigProto(EnvelopeProto_CompressConfigProto&& from) noexcept
    : EnvelopeProto_CompressConfigProto() {
    *this = ::std::move(from);
  }

  inline EnvelopeProto_CompressConfigProto& operator=(const EnvelopeProto_CompressConfigProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvelopeProto_CompressConfigProto& operator=(EnvelopeProto_CompressConfigProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvelopeProto_CompressConfigProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvelopeProto_CompressConfigProto* internal_default_instance() {
    return reinterpret_cast<const EnvelopeProto_CompressConfigProto*>(
               &_EnvelopeProto_CompressConfigProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EnvelopeProto_CompressConfigProto& a, EnvelopeProto_CompressConfigProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvelopeProto_CompressConfigProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvelopeProto_CompressConfigProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvelopeProto_CompressConfigProto* New() const final {
    return CreateMaybeMessage<EnvelopeProto_CompressConfigProto>(nullptr);
  }

  EnvelopeProto_CompressConfigProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvelopeProto_CompressConfigProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvelopeProto_CompressConfigProto& from);
  void MergeFrom(const EnvelopeProto_CompressConfigProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvelopeProto_CompressConfigProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.EnvelopeProto.CompressConfigProto";
  }
  protected:
  explicit EnvelopeProto_CompressConfigProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmFieldNumber = 1,
    kParametersFieldNumber = 4,
    kMinBytesFieldNumber = 2,
    kMinRatioFieldNumber = 3,
  };
  // string algorithm = 1;
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // .google.protobuf.Struct parameters = 4;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const PROTOBUF_NAMESPACE_ID::Struct& parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_parameters();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_parameters();
  void set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      PROTOBUF_NAMESPACE_ID::Struct* parameters);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_parameters();

  // uint64 min_bytes = 2;
  void clear_min_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_bytes() const;
  void set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_bytes() const;
  void _internal_set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float min_ratio = 3;
  void clear_min_ratio();
  float min_ratio() const;
  void set_min_ratio(float value);
  private:
  float _internal_min_ratio() const;
  void _internal_set_min_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:jina.EnvelopeProto.CompressConfigProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  PROTOBUF_NAMESPACE_ID::Struct* parameters_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_bytes_;
  float min_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class EnvelopeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.EnvelopeProto) */ {
 public:
  inline EnvelopeProto() : EnvelopeProto(nullptr) {}
  virtual ~EnvelopeProto();

  EnvelopeProto(const EnvelopeProto& from);
  EnvelopeProto(EnvelopeProto&& from) noexcept
    : EnvelopeProto() {
    *this = ::std::move(from);
  }

  inline EnvelopeProto& operator=(const EnvelopeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvelopeProto& operator=(EnvelopeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvelopeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvelopeProto* internal_default_instance() {
    return reinterpret_cast<const EnvelopeProto*>(
               &_EnvelopeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EnvelopeProto& a, EnvelopeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvelopeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvelopeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvelopeProto* New() const final {
    return CreateMaybeMessage<EnvelopeProto>(nullptr);
  }

  EnvelopeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvelopeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvelopeProto& from);
  void MergeFrom(const EnvelopeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvelopeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.EnvelopeProto";
  }
  protected:
  explicit EnvelopeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnvelopeProto_VersionProto VersionProto;
  typedef EnvelopeProto_CompressConfigProto CompressConfigProto;

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 10,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kRequestTypeFieldNumber = 7,
    kVersionFieldNumber = 6,
    kCompressionFieldNumber = 9,
    kStatusFieldNumber = 11,
    kHeaderFieldNumber = 12,
    kRoutingTableFieldNumber = 13,
    kTimeoutFieldNumber = 4,
    kCheckVersionFieldNumber = 8,
  };
  // repeated .jina.RouteProto routes = 10;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::jina::RouteProto* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto >*
      mutable_routes();
  private:
  const ::jina::RouteProto& _internal_routes(int index) const;
  ::jina::RouteProto* _internal_add_routes();
  public:
  const ::jina::RouteProto& routes(int index) const;
  ::jina::RouteProto* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto >&
      routes() const;

  // string sender_id = 1;
  void clear_sender_id();
  const std::string& sender_id() const;
  void set_sender_id(const std::string& value);
  void set_sender_id(std::string&& value);
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  std::string* mutable_sender_id();
  std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // string receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  void set_receiver_id(const std::string& value);
  void set_receiver_id(std::string&& value);
  void set_receiver_id(const char* value);
  void set_receiver_id(const char* value, size_t size);
  std::string* mutable_receiver_id();
  std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // string request_id = 3;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string request_type = 7;
  void clear_request_type();
  const std::string& request_type() const;
  void set_request_type(const std::string& value);
  void set_request_type(std::string&& value);
  void set_request_type(const char* value);
  void set_request_type(const char* value, size_t size);
  std::string* mutable_request_type();
  std::string* release_request_type();
  void set_allocated_request_type(std::string* request_type);
  private:
  const std::string& _internal_request_type() const;
  void _internal_set_request_type(const std::string& value);
  std::string* _internal_mutable_request_type();
  public:

  // .jina.EnvelopeProto.VersionProto version = 6;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::jina::EnvelopeProto_VersionProto& version() const;
  ::jina::EnvelopeProto_VersionProto* release_version();
  ::jina::EnvelopeProto_VersionProto* mutable_version();
  void set_allocated_version(::jina::EnvelopeProto_VersionProto* version);
  private:
  const ::jina::EnvelopeProto_VersionProto& _internal_version() const;
  ::jina::EnvelopeProto_VersionProto* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::jina::EnvelopeProto_VersionProto* version);
  ::jina::EnvelopeProto_VersionProto* unsafe_arena_release_version();

  // .jina.EnvelopeProto.CompressConfigProto compression = 9;
  bool has_compression() const;
  private:
  bool _internal_has_compression() const;
  public:
  void clear_compression();
  const ::jina::EnvelopeProto_CompressConfigProto& compression() const;
  ::jina::EnvelopeProto_CompressConfigProto* release_compression();
  ::jina::EnvelopeProto_CompressConfigProto* mutable_compression();
  void set_allocated_compression(::jina::EnvelopeProto_CompressConfigProto* compression);
  private:
  const ::jina::EnvelopeProto_CompressConfigProto& _internal_compression() const;
  ::jina::EnvelopeProto_CompressConfigProto* _internal_mutable_compression();
  public:
  void unsafe_arena_set_allocated_compression(
      ::jina::EnvelopeProto_CompressConfigProto* compression);
  ::jina::EnvelopeProto_CompressConfigProto* unsafe_arena_release_compression();

  // .jina.StatusProto status = 11;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::jina::StatusProto& status() const;
  ::jina::StatusProto* release_status();
  ::jina::StatusProto* mutable_status();
  void set_allocated_status(::jina::StatusProto* status);
  private:
  const ::jina::StatusProto& _internal_status() const;
  ::jina::StatusProto* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::jina::StatusProto* status);
  ::jina::StatusProto* unsafe_arena_release_status();

  // .jina.HeaderProto header = 12;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::jina::HeaderProto& header() const;
  ::jina::HeaderProto* release_header();
  ::jina::HeaderProto* mutable_header();
  void set_allocated_header(::jina::HeaderProto* header);
  private:
  const ::jina::HeaderProto& _internal_header() const;
  ::jina::HeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::jina::HeaderProto* header);
  ::jina::HeaderProto* unsafe_arena_release_header();

  // .jina.RoutingTableProto routing_table = 13;
  bool has_routing_table() const;
  private:
  bool _internal_has_routing_table() const;
  public:
  void clear_routing_table();
  const ::jina::RoutingTableProto& routing_table() const;
  ::jina::RoutingTableProto* release_routing_table();
  ::jina::RoutingTableProto* mutable_routing_table();
  void set_allocated_routing_table(::jina::RoutingTableProto* routing_table);
  private:
  const ::jina::RoutingTableProto& _internal_routing_table() const;
  ::jina::RoutingTableProto* _internal_mutable_routing_table();
  public:
  void unsafe_arena_set_allocated_routing_table(
      ::jina::RoutingTableProto* routing_table);
  ::jina::RoutingTableProto* unsafe_arena_release_routing_table();

  // uint32 timeout = 4;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool check_version = 8;
  void clear_check_version();
  bool check_version() const;
  void set_check_version(bool value);
  private:
  bool _internal_check_version() const;
  void _internal_set_check_version(bool value);
  public:

  // @@protoc_insertion_point(class_scope:jina.EnvelopeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto > routes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_type_;
  ::jina::EnvelopeProto_VersionProto* version_;
  ::jina::EnvelopeProto_CompressConfigProto* compression_;
  ::jina::StatusProto* status_;
  ::jina::HeaderProto* header_;
  ::jina::RoutingTableProto* routing_table_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  bool check_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class HeaderProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.HeaderProto) */ {
 public:
  inline HeaderProto() : HeaderProto(nullptr) {}
  virtual ~HeaderProto();

  HeaderProto(const HeaderProto& from);
  HeaderProto(HeaderProto&& from) noexcept
    : HeaderProto() {
    *this = ::std::move(from);
  }

  inline HeaderProto& operator=(const HeaderProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderProto& operator=(HeaderProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeaderProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeaderProto* internal_default_instance() {
    return reinterpret_cast<const HeaderProto*>(
               &_HeaderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(HeaderProto& a, HeaderProto& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderProto* New() const final {
    return CreateMaybeMessage<HeaderProto>(nullptr);
  }

  HeaderProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderProto& from);
  void MergeFrom(const HeaderProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.HeaderProto";
  }
  protected:
  explicit HeaderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecEndpointFieldNumber = 1,
    kTargetPeapodFieldNumber = 2,
    kNoPropagateFieldNumber = 3,
  };
  // string exec_endpoint = 1;
  void clear_exec_endpoint();
  const std::string& exec_endpoint() const;
  void set_exec_endpoint(const std::string& value);
  void set_exec_endpoint(std::string&& value);
  void set_exec_endpoint(const char* value);
  void set_exec_endpoint(const char* value, size_t size);
  std::string* mutable_exec_endpoint();
  std::string* release_exec_endpoint();
  void set_allocated_exec_endpoint(std::string* exec_endpoint);
  private:
  const std::string& _internal_exec_endpoint() const;
  void _internal_set_exec_endpoint(const std::string& value);
  std::string* _internal_mutable_exec_endpoint();
  public:

  // string target_peapod = 2;
  void clear_target_peapod();
  const std::string& target_peapod() const;
  void set_target_peapod(const std::string& value);
  void set_target_peapod(std::string&& value);
  void set_target_peapod(const char* value);
  void set_target_peapod(const char* value, size_t size);
  std::string* mutable_target_peapod();
  std::string* release_target_peapod();
  void set_allocated_target_peapod(std::string* target_peapod);
  private:
  const std::string& _internal_target_peapod() const;
  void _internal_set_target_peapod(const std::string& value);
  std::string* _internal_mutable_target_peapod();
  public:

  // bool no_propagate = 3;
  void clear_no_propagate();
  bool no_propagate() const;
  void set_no_propagate(bool value);
  private:
  bool _internal_no_propagate() const;
  void _internal_set_no_propagate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:jina.HeaderProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exec_endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_peapod_;
  bool no_propagate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class StatusProto_ExceptionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.StatusProto.ExceptionProto) */ {
 public:
  inline StatusProto_ExceptionProto() : StatusProto_ExceptionProto(nullptr) {}
  virtual ~StatusProto_ExceptionProto();

  StatusProto_ExceptionProto(const StatusProto_ExceptionProto& from);
  StatusProto_ExceptionProto(StatusProto_ExceptionProto&& from) noexcept
    : StatusProto_ExceptionProto() {
    *this = ::std::move(from);
  }

  inline StatusProto_ExceptionProto& operator=(const StatusProto_ExceptionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusProto_ExceptionProto& operator=(StatusProto_ExceptionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusProto_ExceptionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusProto_ExceptionProto* internal_default_instance() {
    return reinterpret_cast<const StatusProto_ExceptionProto*>(
               &_StatusProto_ExceptionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StatusProto_ExceptionProto& a, StatusProto_ExceptionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusProto_ExceptionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusProto_ExceptionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusProto_ExceptionProto* New() const final {
    return CreateMaybeMessage<StatusProto_ExceptionProto>(nullptr);
  }

  StatusProto_ExceptionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusProto_ExceptionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusProto_ExceptionProto& from);
  void MergeFrom(const StatusProto_ExceptionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusProto_ExceptionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.StatusProto.ExceptionProto";
  }
  protected:
  explicit StatusProto_ExceptionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kStacksFieldNumber = 3,
    kNameFieldNumber = 1,
    kExecutorFieldNumber = 4,
  };
  // repeated string args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // repeated string stacks = 3;
  int stacks_size() const;
  private:
  int _internal_stacks_size() const;
  public:
  void clear_stacks();
  const std::string& stacks(int index) const;
  std::string* mutable_stacks(int index);
  void set_stacks(int index, const std::string& value);
  void set_stacks(int index, std::string&& value);
  void set_stacks(int index, const char* value);
  void set_stacks(int index, const char* value, size_t size);
  std::string* add_stacks();
  void add_stacks(const std::string& value);
  void add_stacks(std::string&& value);
  void add_stacks(const char* value);
  void add_stacks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stacks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stacks();
  private:
  const std::string& _internal_stacks(int index) const;
  std::string* _internal_add_stacks();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string executor = 4;
  void clear_executor();
  const std::string& executor() const;
  void set_executor(const std::string& value);
  void set_executor(std::string&& value);
  void set_executor(const char* value);
  void set_executor(const char* value, size_t size);
  std::string* mutable_executor();
  std::string* release_executor();
  void set_allocated_executor(std::string* executor);
  private:
  const std::string& _internal_executor() const;
  void _internal_set_executor(const std::string& value);
  std::string* _internal_mutable_executor();
  public:

  // @@protoc_insertion_point(class_scope:jina.StatusProto.ExceptionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stacks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class StatusProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.StatusProto) */ {
 public:
  inline StatusProto() : StatusProto(nullptr) {}
  virtual ~StatusProto();

  StatusProto(const StatusProto& from);
  StatusProto(StatusProto&& from) noexcept
    : StatusProto() {
    *this = ::std::move(from);
  }

  inline StatusProto& operator=(const StatusProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusProto& operator=(StatusProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusProto* internal_default_instance() {
    return reinterpret_cast<const StatusProto*>(
               &_StatusProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StatusProto& a, StatusProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusProto* New() const final {
    return CreateMaybeMessage<StatusProto>(nullptr);
  }

  StatusProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusProto& from);
  void MergeFrom(const StatusProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.StatusProto";
  }
  protected:
  explicit StatusProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StatusProto_ExceptionProto ExceptionProto;

  typedef StatusProto_StatusCode StatusCode;
  static constexpr StatusCode SUCCESS =
    StatusProto_StatusCode_SUCCESS;
  static constexpr StatusCode PENDING =
    StatusProto_StatusCode_PENDING;
  static constexpr StatusCode READY =
    StatusProto_StatusCode_READY;
  static constexpr StatusCode ERROR =
    StatusProto_StatusCode_ERROR;
  static constexpr StatusCode ERROR_DUPLICATE =
    StatusProto_StatusCode_ERROR_DUPLICATE;
  static constexpr StatusCode ERROR_NOTALLOWED =
    StatusProto_StatusCode_ERROR_NOTALLOWED;
  static constexpr StatusCode ERROR_CHAINED =
    StatusProto_StatusCode_ERROR_CHAINED;
  static inline bool StatusCode_IsValid(int value) {
    return StatusProto_StatusCode_IsValid(value);
  }
  static constexpr StatusCode StatusCode_MIN =
    StatusProto_StatusCode_StatusCode_MIN;
  static constexpr StatusCode StatusCode_MAX =
    StatusProto_StatusCode_StatusCode_MAX;
  static constexpr int StatusCode_ARRAYSIZE =
    StatusProto_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusCode_descriptor() {
    return StatusProto_StatusCode_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusCode_Name.");
    return StatusProto_StatusCode_Name(enum_t_value);
  }
  static inline bool StatusCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StatusCode* value) {
    return StatusProto_StatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kExceptionFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .jina.StatusProto.ExceptionProto exception = 3;
  bool has_exception() const;
  private:
  bool _internal_has_exception() const;
  public:
  void clear_exception();
  const ::jina::StatusProto_ExceptionProto& exception() const;
  ::jina::StatusProto_ExceptionProto* release_exception();
  ::jina::StatusProto_ExceptionProto* mutable_exception();
  void set_allocated_exception(::jina::StatusProto_ExceptionProto* exception);
  private:
  const ::jina::StatusProto_ExceptionProto& _internal_exception() const;
  ::jina::StatusProto_ExceptionProto* _internal_mutable_exception();
  public:
  void unsafe_arena_set_allocated_exception(
      ::jina::StatusProto_ExceptionProto* exception);
  ::jina::StatusProto_ExceptionProto* unsafe_arena_release_exception();

  // .jina.StatusProto.StatusCode code = 1;
  void clear_code();
  ::jina::StatusProto_StatusCode code() const;
  void set_code(::jina::StatusProto_StatusCode value);
  private:
  ::jina::StatusProto_StatusCode _internal_code() const;
  void _internal_set_code(::jina::StatusProto_StatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:jina.StatusProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::jina::StatusProto_ExceptionProto* exception_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class MessageProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.MessageProto) */ {
 public:
  inline MessageProto() : MessageProto(nullptr) {}
  virtual ~MessageProto();

  MessageProto(const MessageProto& from);
  MessageProto(MessageProto&& from) noexcept
    : MessageProto() {
    *this = ::std::move(from);
  }

  inline MessageProto& operator=(const MessageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageProto& operator=(MessageProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageProto* internal_default_instance() {
    return reinterpret_cast<const MessageProto*>(
               &_MessageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MessageProto& a, MessageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageProto* New() const final {
    return CreateMaybeMessage<MessageProto>(nullptr);
  }

  MessageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageProto& from);
  void MergeFrom(const MessageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.MessageProto";
  }
  protected:
  explicit MessageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
    kRequestFieldNumber = 2,
  };
  // .jina.EnvelopeProto envelope = 1;
  bool has_envelope() const;
  private:
  bool _internal_has_envelope() const;
  public:
  void clear_envelope();
  const ::jina::EnvelopeProto& envelope() const;
  ::jina::EnvelopeProto* release_envelope();
  ::jina::EnvelopeProto* mutable_envelope();
  void set_allocated_envelope(::jina::EnvelopeProto* envelope);
  private:
  const ::jina::EnvelopeProto& _internal_envelope() const;
  ::jina::EnvelopeProto* _internal_mutable_envelope();
  public:
  void unsafe_arena_set_allocated_envelope(
      ::jina::EnvelopeProto* envelope);
  ::jina::EnvelopeProto* unsafe_arena_release_envelope();

  // .jina.RequestProto request = 2;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::jina::RequestProto& request() const;
  ::jina::RequestProto* release_request();
  ::jina::RequestProto* mutable_request();
  void set_allocated_request(::jina::RequestProto* request);
  private:
  const ::jina::RequestProto& _internal_request() const;
  ::jina::RequestProto* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::jina::RequestProto* request);
  ::jina::RequestProto* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:jina.MessageProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::jina::EnvelopeProto* envelope_;
  ::jina::RequestProto* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class DocumentArrayProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.DocumentArrayProto) */ {
 public:
  inline DocumentArrayProto() : DocumentArrayProto(nullptr) {}
  virtual ~DocumentArrayProto();

  DocumentArrayProto(const DocumentArrayProto& from);
  DocumentArrayProto(DocumentArrayProto&& from) noexcept
    : DocumentArrayProto() {
    *this = ::std::move(from);
  }

  inline DocumentArrayProto& operator=(const DocumentArrayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentArrayProto& operator=(DocumentArrayProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DocumentArrayProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentArrayProto* internal_default_instance() {
    return reinterpret_cast<const DocumentArrayProto*>(
               &_DocumentArrayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DocumentArrayProto& a, DocumentArrayProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentArrayProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentArrayProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentArrayProto* New() const final {
    return CreateMaybeMessage<DocumentArrayProto>(nullptr);
  }

  DocumentArrayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentArrayProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentArrayProto& from);
  void MergeFrom(const DocumentArrayProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentArrayProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.DocumentArrayProto";
  }
  protected:
  explicit DocumentArrayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocsFieldNumber = 1,
  };
  // repeated .jina.DocumentProto docs = 1;
  int docs_size() const;
  private:
  int _internal_docs_size() const;
  public:
  void clear_docs();
  ::jina::DocumentProto* mutable_docs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
      mutable_docs();
  private:
  const ::jina::DocumentProto& _internal_docs(int index) const;
  ::jina::DocumentProto* _internal_add_docs();
  public:
  const ::jina::DocumentProto& docs(int index) const;
  ::jina::DocumentProto* add_docs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
      docs() const;

  // @@protoc_insertion_point(class_scope:jina.DocumentArrayProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto > docs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class RequestProto_DataRequestProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.RequestProto.DataRequestProto) */ {
 public:
  inline RequestProto_DataRequestProto() : RequestProto_DataRequestProto(nullptr) {}
  virtual ~RequestProto_DataRequestProto();

  RequestProto_DataRequestProto(const RequestProto_DataRequestProto& from);
  RequestProto_DataRequestProto(RequestProto_DataRequestProto&& from) noexcept
    : RequestProto_DataRequestProto() {
    *this = ::std::move(from);
  }

  inline RequestProto_DataRequestProto& operator=(const RequestProto_DataRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestProto_DataRequestProto& operator=(RequestProto_DataRequestProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestProto_DataRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestProto_DataRequestProto* internal_default_instance() {
    return reinterpret_cast<const RequestProto_DataRequestProto*>(
               &_RequestProto_DataRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RequestProto_DataRequestProto& a, RequestProto_DataRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestProto_DataRequestProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestProto_DataRequestProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestProto_DataRequestProto* New() const final {
    return CreateMaybeMessage<RequestProto_DataRequestProto>(nullptr);
  }

  RequestProto_DataRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestProto_DataRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestProto_DataRequestProto& from);
  void MergeFrom(const RequestProto_DataRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestProto_DataRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.RequestProto.DataRequestProto";
  }
  protected:
  explicit RequestProto_DataRequestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocsFieldNumber = 1,
    kGroundtruthsFieldNumber = 2,
  };
  // repeated .jina.DocumentProto docs = 1;
  int docs_size() const;
  private:
  int _internal_docs_size() const;
  public:
  void clear_docs();
  ::jina::DocumentProto* mutable_docs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
      mutable_docs();
  private:
  const ::jina::DocumentProto& _internal_docs(int index) const;
  ::jina::DocumentProto* _internal_add_docs();
  public:
  const ::jina::DocumentProto& docs(int index) const;
  ::jina::DocumentProto* add_docs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
      docs() const;

  // repeated .jina.DocumentProto groundtruths = 2;
  int groundtruths_size() const;
  private:
  int _internal_groundtruths_size() const;
  public:
  void clear_groundtruths();
  ::jina::DocumentProto* mutable_groundtruths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
      mutable_groundtruths();
  private:
  const ::jina::DocumentProto& _internal_groundtruths(int index) const;
  ::jina::DocumentProto* _internal_add_groundtruths();
  public:
  const ::jina::DocumentProto& groundtruths(int index) const;
  ::jina::DocumentProto* add_groundtruths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
      groundtruths() const;

  // @@protoc_insertion_point(class_scope:jina.RequestProto.DataRequestProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto > docs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto > groundtruths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class RequestProto_ControlRequestProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.RequestProto.ControlRequestProto) */ {
 public:
  inline RequestProto_ControlRequestProto() : RequestProto_ControlRequestProto(nullptr) {}
  virtual ~RequestProto_ControlRequestProto();

  RequestProto_ControlRequestProto(const RequestProto_ControlRequestProto& from);
  RequestProto_ControlRequestProto(RequestProto_ControlRequestProto&& from) noexcept
    : RequestProto_ControlRequestProto() {
    *this = ::std::move(from);
  }

  inline RequestProto_ControlRequestProto& operator=(const RequestProto_ControlRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestProto_ControlRequestProto& operator=(RequestProto_ControlRequestProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestProto_ControlRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestProto_ControlRequestProto* internal_default_instance() {
    return reinterpret_cast<const RequestProto_ControlRequestProto*>(
               &_RequestProto_ControlRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(RequestProto_ControlRequestProto& a, RequestProto_ControlRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestProto_ControlRequestProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestProto_ControlRequestProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestProto_ControlRequestProto* New() const final {
    return CreateMaybeMessage<RequestProto_ControlRequestProto>(nullptr);
  }

  RequestProto_ControlRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestProto_ControlRequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestProto_ControlRequestProto& from);
  void MergeFrom(const RequestProto_ControlRequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestProto_ControlRequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.RequestProto.ControlRequestProto";
  }
  protected:
  explicit RequestProto_ControlRequestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RequestProto_ControlRequestProto_Command Command;
  static constexpr Command TERMINATE =
    RequestProto_ControlRequestProto_Command_TERMINATE;
  static constexpr Command STATUS =
    RequestProto_ControlRequestProto_Command_STATUS;
  static constexpr Command IDLE =
    RequestProto_ControlRequestProto_Command_IDLE;
  static constexpr Command CANCEL =
    RequestProto_ControlRequestProto_Command_CANCEL;
  static constexpr Command SCALE =
    RequestProto_ControlRequestProto_Command_SCALE;
  static constexpr Command ACTIVATE =
    RequestProto_ControlRequestProto_Command_ACTIVATE;
  static constexpr Command DEACTIVATE =
    RequestProto_ControlRequestProto_Command_DEACTIVATE;
  static inline bool Command_IsValid(int value) {
    return RequestProto_ControlRequestProto_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    RequestProto_ControlRequestProto_Command_Command_MIN;
  static constexpr Command Command_MAX =
    RequestProto_ControlRequestProto_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    RequestProto_ControlRequestProto_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return RequestProto_ControlRequestProto_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return RequestProto_ControlRequestProto_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return RequestProto_ControlRequestProto_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .jina.RequestProto.ControlRequestProto.Command command = 1;
  void clear_command();
  ::jina::RequestProto_ControlRequestProto_Command command() const;
  void set_command(::jina::RequestProto_ControlRequestProto_Command value);
  private:
  ::jina::RequestProto_ControlRequestProto_Command _internal_command() const;
  void _internal_set_command(::jina::RequestProto_ControlRequestProto_Command value);
  public:

  // @@protoc_insertion_point(class_scope:jina.RequestProto.ControlRequestProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jina_2eproto;
};
// -------------------------------------------------------------------

class RequestProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jina.RequestProto) */ {
 public:
  inline RequestProto() : RequestProto(nullptr) {}
  virtual ~RequestProto();

  RequestProto(const RequestProto& from);
  RequestProto(RequestProto&& from) noexcept
    : RequestProto() {
    *this = ::std::move(from);
  }

  inline RequestProto& operator=(const RequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestProto& operator=(RequestProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestProto& default_instance();

  enum BodyCase {
    kControl = 2,
    kData = 3,
    BODY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestProto* internal_default_instance() {
    return reinterpret_cast<const RequestProto*>(
               &_RequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(RequestProto& a, RequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestProto* New() const final {
    return CreateMaybeMessage<RequestProto>(nullptr);
  }

  RequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestProto& from);
  void MergeFrom(const RequestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jina.RequestProto";
  }
  protected:
  explicit RequestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jina_2eproto);
    return ::descriptor_table_jina_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RequestProto_DataRequestProto DataRequestProto;
  typedef RequestProto_ControlRequestProto ControlRequestProto;

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 6,
    kRequestIdFieldNumber = 1,
    kHeaderFieldNumber = 4,
    kParametersFieldNumber = 5,
    kStatusFieldNumber = 7,
    kControlFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // repeated .jina.RouteProto routes = 6;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::jina::RouteProto* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto >*
      mutable_routes();
  private:
  const ::jina::RouteProto& _internal_routes(int index) const;
  ::jina::RouteProto* _internal_add_routes();
  public:
  const ::jina::RouteProto& routes(int index) const;
  ::jina::RouteProto* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto >&
      routes() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .jina.HeaderProto header = 4;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::jina::HeaderProto& header() const;
  ::jina::HeaderProto* release_header();
  ::jina::HeaderProto* mutable_header();
  void set_allocated_header(::jina::HeaderProto* header);
  private:
  const ::jina::HeaderProto& _internal_header() const;
  ::jina::HeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::jina::HeaderProto* header);
  ::jina::HeaderProto* unsafe_arena_release_header();

  // .google.protobuf.Struct parameters = 5;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const PROTOBUF_NAMESPACE_ID::Struct& parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_parameters();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_parameters();
  void set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_parameters() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      PROTOBUF_NAMESPACE_ID::Struct* parameters);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_parameters();

  // .jina.StatusProto status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::jina::StatusProto& status() const;
  ::jina::StatusProto* release_status();
  ::jina::StatusProto* mutable_status();
  void set_allocated_status(::jina::StatusProto* status);
  private:
  const ::jina::StatusProto& _internal_status() const;
  ::jina::StatusProto* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::jina::StatusProto* status);
  ::jina::StatusProto* unsafe_arena_release_status();

  // .jina.RequestProto.ControlRequestProto control = 2;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::jina::RequestProto_ControlRequestProto& control() const;
  ::jina::RequestProto_ControlRequestProto* release_control();
  ::jina::RequestProto_ControlRequestProto* mutable_control();
  void set_allocated_control(::jina::RequestProto_ControlRequestProto* control);
  private:
  const ::jina::RequestProto_ControlRequestProto& _internal_control() const;
  ::jina::RequestProto_ControlRequestProto* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::jina::RequestProto_ControlRequestProto* control);
  ::jina::RequestProto_ControlRequestProto* unsafe_arena_release_control();

  // .jina.RequestProto.DataRequestProto data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::jina::RequestProto_DataRequestProto& data() const;
  ::jina::RequestProto_DataRequestProto* release_data();
  ::jina::RequestProto_DataRequestProto* mutable_data();
  void set_allocated_data(::jina::RequestProto_DataRequestProto* data);
  private:
  const ::jina::RequestProto_DataRequestProto& _internal_data() const;
  ::jina::RequestProto_DataRequestProto* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::jina::RequestProto_DataRequestProto* data);
  ::jina::RequestProto_DataRequestProto* unsafe_arena_release_data();

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:jina.RequestProto)
 private:
  class _Internal;
  void set_has_control();
  void set_has_data();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto > routes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::jina::HeaderProto* header_;
  PROTOBUF_NAMESPACE_ID::Struct* parameters_;
  ::jina::StatusProto* status_;
  union BodyUnion {
    BodyUnion() {}
    ::jina::RequestProto_ControlRequestProto* control_;
    ::jina::RequestProto_DataRequestProto* data_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_jina_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DenseNdArrayProto

// bytes buffer = 1;
inline void DenseNdArrayProto::clear_buffer() {
  buffer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DenseNdArrayProto::buffer() const {
  // @@protoc_insertion_point(field_get:jina.DenseNdArrayProto.buffer)
  return _internal_buffer();
}
inline void DenseNdArrayProto::set_buffer(const std::string& value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:jina.DenseNdArrayProto.buffer)
}
inline std::string* DenseNdArrayProto::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:jina.DenseNdArrayProto.buffer)
  return _internal_mutable_buffer();
}
inline const std::string& DenseNdArrayProto::_internal_buffer() const {
  return buffer_.Get();
}
inline void DenseNdArrayProto::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DenseNdArrayProto::set_buffer(std::string&& value) {
  
  buffer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.DenseNdArrayProto.buffer)
}
inline void DenseNdArrayProto::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.DenseNdArrayProto.buffer)
}
inline void DenseNdArrayProto::set_buffer(const void* value,
    size_t size) {
  
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.DenseNdArrayProto.buffer)
}
inline std::string* DenseNdArrayProto::_internal_mutable_buffer() {
  
  return buffer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DenseNdArrayProto::release_buffer() {
  // @@protoc_insertion_point(field_release:jina.DenseNdArrayProto.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DenseNdArrayProto::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.DenseNdArrayProto.buffer)
}

// repeated uint32 shape = 2;
inline int DenseNdArrayProto::_internal_shape_size() const {
  return shape_.size();
}
inline int DenseNdArrayProto::shape_size() const {
  return _internal_shape_size();
}
inline void DenseNdArrayProto::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DenseNdArrayProto::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DenseNdArrayProto::shape(int index) const {
  // @@protoc_insertion_point(field_get:jina.DenseNdArrayProto.shape)
  return _internal_shape(index);
}
inline void DenseNdArrayProto::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:jina.DenseNdArrayProto.shape)
}
inline void DenseNdArrayProto::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Add(value);
}
inline void DenseNdArrayProto::add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:jina.DenseNdArrayProto.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DenseNdArrayProto::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DenseNdArrayProto::shape() const {
  // @@protoc_insertion_point(field_list:jina.DenseNdArrayProto.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DenseNdArrayProto::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DenseNdArrayProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:jina.DenseNdArrayProto.shape)
  return _internal_mutable_shape();
}

// string dtype = 3;
inline void DenseNdArrayProto::clear_dtype() {
  dtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DenseNdArrayProto::dtype() const {
  // @@protoc_insertion_point(field_get:jina.DenseNdArrayProto.dtype)
  return _internal_dtype();
}
inline void DenseNdArrayProto::set_dtype(const std::string& value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:jina.DenseNdArrayProto.dtype)
}
inline std::string* DenseNdArrayProto::mutable_dtype() {
  // @@protoc_insertion_point(field_mutable:jina.DenseNdArrayProto.dtype)
  return _internal_mutable_dtype();
}
inline const std::string& DenseNdArrayProto::_internal_dtype() const {
  return dtype_.Get();
}
inline void DenseNdArrayProto::_internal_set_dtype(const std::string& value) {
  
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DenseNdArrayProto::set_dtype(std::string&& value) {
  
  dtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.DenseNdArrayProto.dtype)
}
inline void DenseNdArrayProto::set_dtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.DenseNdArrayProto.dtype)
}
inline void DenseNdArrayProto::set_dtype(const char* value,
    size_t size) {
  
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.DenseNdArrayProto.dtype)
}
inline std::string* DenseNdArrayProto::_internal_mutable_dtype() {
  
  return dtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DenseNdArrayProto::release_dtype() {
  // @@protoc_insertion_point(field_release:jina.DenseNdArrayProto.dtype)
  return dtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DenseNdArrayProto::set_allocated_dtype(std::string* dtype) {
  if (dtype != nullptr) {
    
  } else {
    
  }
  dtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.DenseNdArrayProto.dtype)
}

// -------------------------------------------------------------------

// NdArrayProto

// .jina.DenseNdArrayProto dense = 1;
inline bool NdArrayProto::_internal_has_dense() const {
  return content_case() == kDense;
}
inline bool NdArrayProto::has_dense() const {
  return _internal_has_dense();
}
inline void NdArrayProto::set_has_dense() {
  _oneof_case_[0] = kDense;
}
inline void NdArrayProto::clear_dense() {
  if (_internal_has_dense()) {
    if (GetArena() == nullptr) {
      delete content_.dense_;
    }
    clear_has_content();
  }
}
inline ::jina::DenseNdArrayProto* NdArrayProto::release_dense() {
  // @@protoc_insertion_point(field_release:jina.NdArrayProto.dense)
  if (_internal_has_dense()) {
    clear_has_content();
      ::jina::DenseNdArrayProto* temp = content_.dense_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.dense_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jina::DenseNdArrayProto& NdArrayProto::_internal_dense() const {
  return _internal_has_dense()
      ? *content_.dense_
      : *reinterpret_cast< ::jina::DenseNdArrayProto*>(&::jina::_DenseNdArrayProto_default_instance_);
}
inline const ::jina::DenseNdArrayProto& NdArrayProto::dense() const {
  // @@protoc_insertion_point(field_get:jina.NdArrayProto.dense)
  return _internal_dense();
}
inline ::jina::DenseNdArrayProto* NdArrayProto::unsafe_arena_release_dense() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jina.NdArrayProto.dense)
  if (_internal_has_dense()) {
    clear_has_content();
    ::jina::DenseNdArrayProto* temp = content_.dense_;
    content_.dense_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NdArrayProto::unsafe_arena_set_allocated_dense(::jina::DenseNdArrayProto* dense) {
  clear_content();
  if (dense) {
    set_has_dense();
    content_.dense_ = dense;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.NdArrayProto.dense)
}
inline ::jina::DenseNdArrayProto* NdArrayProto::_internal_mutable_dense() {
  if (!_internal_has_dense()) {
    clear_content();
    set_has_dense();
    content_.dense_ = CreateMaybeMessage< ::jina::DenseNdArrayProto >(GetArena());
  }
  return content_.dense_;
}
inline ::jina::DenseNdArrayProto* NdArrayProto::mutable_dense() {
  // @@protoc_insertion_point(field_mutable:jina.NdArrayProto.dense)
  return _internal_mutable_dense();
}

// .jina.SparseNdArrayProto sparse = 2;
inline bool NdArrayProto::_internal_has_sparse() const {
  return content_case() == kSparse;
}
inline bool NdArrayProto::has_sparse() const {
  return _internal_has_sparse();
}
inline void NdArrayProto::set_has_sparse() {
  _oneof_case_[0] = kSparse;
}
inline void NdArrayProto::clear_sparse() {
  if (_internal_has_sparse()) {
    if (GetArena() == nullptr) {
      delete content_.sparse_;
    }
    clear_has_content();
  }
}
inline ::jina::SparseNdArrayProto* NdArrayProto::release_sparse() {
  // @@protoc_insertion_point(field_release:jina.NdArrayProto.sparse)
  if (_internal_has_sparse()) {
    clear_has_content();
      ::jina::SparseNdArrayProto* temp = content_.sparse_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.sparse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jina::SparseNdArrayProto& NdArrayProto::_internal_sparse() const {
  return _internal_has_sparse()
      ? *content_.sparse_
      : *reinterpret_cast< ::jina::SparseNdArrayProto*>(&::jina::_SparseNdArrayProto_default_instance_);
}
inline const ::jina::SparseNdArrayProto& NdArrayProto::sparse() const {
  // @@protoc_insertion_point(field_get:jina.NdArrayProto.sparse)
  return _internal_sparse();
}
inline ::jina::SparseNdArrayProto* NdArrayProto::unsafe_arena_release_sparse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jina.NdArrayProto.sparse)
  if (_internal_has_sparse()) {
    clear_has_content();
    ::jina::SparseNdArrayProto* temp = content_.sparse_;
    content_.sparse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NdArrayProto::unsafe_arena_set_allocated_sparse(::jina::SparseNdArrayProto* sparse) {
  clear_content();
  if (sparse) {
    set_has_sparse();
    content_.sparse_ = sparse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.NdArrayProto.sparse)
}
inline ::jina::SparseNdArrayProto* NdArrayProto::_internal_mutable_sparse() {
  if (!_internal_has_sparse()) {
    clear_content();
    set_has_sparse();
    content_.sparse_ = CreateMaybeMessage< ::jina::SparseNdArrayProto >(GetArena());
  }
  return content_.sparse_;
}
inline ::jina::SparseNdArrayProto* NdArrayProto::mutable_sparse() {
  // @@protoc_insertion_point(field_mutable:jina.NdArrayProto.sparse)
  return _internal_mutable_sparse();
}

// string cls_name = 3;
inline void NdArrayProto::clear_cls_name() {
  cls_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NdArrayProto::cls_name() const {
  // @@protoc_insertion_point(field_get:jina.NdArrayProto.cls_name)
  return _internal_cls_name();
}
inline void NdArrayProto::set_cls_name(const std::string& value) {
  _internal_set_cls_name(value);
  // @@protoc_insertion_point(field_set:jina.NdArrayProto.cls_name)
}
inline std::string* NdArrayProto::mutable_cls_name() {
  // @@protoc_insertion_point(field_mutable:jina.NdArrayProto.cls_name)
  return _internal_mutable_cls_name();
}
inline const std::string& NdArrayProto::_internal_cls_name() const {
  return cls_name_.Get();
}
inline void NdArrayProto::_internal_set_cls_name(const std::string& value) {
  
  cls_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NdArrayProto::set_cls_name(std::string&& value) {
  
  cls_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.NdArrayProto.cls_name)
}
inline void NdArrayProto::set_cls_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cls_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.NdArrayProto.cls_name)
}
inline void NdArrayProto::set_cls_name(const char* value,
    size_t size) {
  
  cls_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.NdArrayProto.cls_name)
}
inline std::string* NdArrayProto::_internal_mutable_cls_name() {
  
  return cls_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NdArrayProto::release_cls_name() {
  // @@protoc_insertion_point(field_release:jina.NdArrayProto.cls_name)
  return cls_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NdArrayProto::set_allocated_cls_name(std::string* cls_name) {
  if (cls_name != nullptr) {
    
  } else {
    
  }
  cls_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cls_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.NdArrayProto.cls_name)
}

// .google.protobuf.Struct parameters = 4;
inline bool NdArrayProto::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool NdArrayProto::has_parameters() const {
  return _internal_has_parameters();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& NdArrayProto::_internal_parameters() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& NdArrayProto::parameters() const {
  // @@protoc_insertion_point(field_get:jina.NdArrayProto.parameters)
  return _internal_parameters();
}
inline void NdArrayProto::unsafe_arena_set_allocated_parameters(
    PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.NdArrayProto.parameters)
}
inline PROTOBUF_NAMESPACE_ID::Struct* NdArrayProto::release_parameters() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* NdArrayProto::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:jina.NdArrayProto.parameters)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* NdArrayProto::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* NdArrayProto::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:jina.NdArrayProto.parameters)
  return _internal_mutable_parameters();
}
inline void NdArrayProto::set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:jina.NdArrayProto.parameters)
}

inline bool NdArrayProto::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void NdArrayProto::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline NdArrayProto::ContentCase NdArrayProto::content_case() const {
  return NdArrayProto::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SparseNdArrayProto

// .jina.DenseNdArrayProto indices = 1;
inline bool SparseNdArrayProto::_internal_has_indices() const {
  return this != internal_default_instance() && indices_ != nullptr;
}
inline bool SparseNdArrayProto::has_indices() const {
  return _internal_has_indices();
}
inline void SparseNdArrayProto::clear_indices() {
  if (GetArena() == nullptr && indices_ != nullptr) {
    delete indices_;
  }
  indices_ = nullptr;
}
inline const ::jina::DenseNdArrayProto& SparseNdArrayProto::_internal_indices() const {
  const ::jina::DenseNdArrayProto* p = indices_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::DenseNdArrayProto*>(
      &::jina::_DenseNdArrayProto_default_instance_);
}
inline const ::jina::DenseNdArrayProto& SparseNdArrayProto::indices() const {
  // @@protoc_insertion_point(field_get:jina.SparseNdArrayProto.indices)
  return _internal_indices();
}
inline void SparseNdArrayProto::unsafe_arena_set_allocated_indices(
    ::jina::DenseNdArrayProto* indices) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indices_);
  }
  indices_ = indices;
  if (indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.SparseNdArrayProto.indices)
}
inline ::jina::DenseNdArrayProto* SparseNdArrayProto::release_indices() {
  
  ::jina::DenseNdArrayProto* temp = indices_;
  indices_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::DenseNdArrayProto* SparseNdArrayProto::unsafe_arena_release_indices() {
  // @@protoc_insertion_point(field_release:jina.SparseNdArrayProto.indices)
  
  ::jina::DenseNdArrayProto* temp = indices_;
  indices_ = nullptr;
  return temp;
}
inline ::jina::DenseNdArrayProto* SparseNdArrayProto::_internal_mutable_indices() {
  
  if (indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::DenseNdArrayProto>(GetArena());
    indices_ = p;
  }
  return indices_;
}
inline ::jina::DenseNdArrayProto* SparseNdArrayProto::mutable_indices() {
  // @@protoc_insertion_point(field_mutable:jina.SparseNdArrayProto.indices)
  return _internal_mutable_indices();
}
inline void SparseNdArrayProto::set_allocated_indices(::jina::DenseNdArrayProto* indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete indices_;
  }
  if (indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(indices);
    if (message_arena != submessage_arena) {
      indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indices, submessage_arena);
    }
    
  } else {
    
  }
  indices_ = indices;
  // @@protoc_insertion_point(field_set_allocated:jina.SparseNdArrayProto.indices)
}

// .jina.DenseNdArrayProto values = 2;
inline bool SparseNdArrayProto::_internal_has_values() const {
  return this != internal_default_instance() && values_ != nullptr;
}
inline bool SparseNdArrayProto::has_values() const {
  return _internal_has_values();
}
inline void SparseNdArrayProto::clear_values() {
  if (GetArena() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
}
inline const ::jina::DenseNdArrayProto& SparseNdArrayProto::_internal_values() const {
  const ::jina::DenseNdArrayProto* p = values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::DenseNdArrayProto*>(
      &::jina::_DenseNdArrayProto_default_instance_);
}
inline const ::jina::DenseNdArrayProto& SparseNdArrayProto::values() const {
  // @@protoc_insertion_point(field_get:jina.SparseNdArrayProto.values)
  return _internal_values();
}
inline void SparseNdArrayProto::unsafe_arena_set_allocated_values(
    ::jina::DenseNdArrayProto* values) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(values_);
  }
  values_ = values;
  if (values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.SparseNdArrayProto.values)
}
inline ::jina::DenseNdArrayProto* SparseNdArrayProto::release_values() {
  
  ::jina::DenseNdArrayProto* temp = values_;
  values_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::DenseNdArrayProto* SparseNdArrayProto::unsafe_arena_release_values() {
  // @@protoc_insertion_point(field_release:jina.SparseNdArrayProto.values)
  
  ::jina::DenseNdArrayProto* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::jina::DenseNdArrayProto* SparseNdArrayProto::_internal_mutable_values() {
  
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::DenseNdArrayProto>(GetArena());
    values_ = p;
  }
  return values_;
}
inline ::jina::DenseNdArrayProto* SparseNdArrayProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable:jina.SparseNdArrayProto.values)
  return _internal_mutable_values();
}
inline void SparseNdArrayProto::set_allocated_values(::jina::DenseNdArrayProto* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(values);
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    
  } else {
    
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:jina.SparseNdArrayProto.values)
}

// repeated uint32 shape = 3;
inline int SparseNdArrayProto::_internal_shape_size() const {
  return shape_.size();
}
inline int SparseNdArrayProto::shape_size() const {
  return _internal_shape_size();
}
inline void SparseNdArrayProto::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseNdArrayProto::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseNdArrayProto::shape(int index) const {
  // @@protoc_insertion_point(field_get:jina.SparseNdArrayProto.shape)
  return _internal_shape(index);
}
inline void SparseNdArrayProto::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:jina.SparseNdArrayProto.shape)
}
inline void SparseNdArrayProto::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Add(value);
}
inline void SparseNdArrayProto::add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:jina.SparseNdArrayProto.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SparseNdArrayProto::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SparseNdArrayProto::shape() const {
  // @@protoc_insertion_point(field_list:jina.SparseNdArrayProto.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SparseNdArrayProto::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SparseNdArrayProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:jina.SparseNdArrayProto.shape)
  return _internal_mutable_shape();
}

// -------------------------------------------------------------------

// NamedScoreProto

// float value = 1;
inline void NamedScoreProto::clear_value() {
  value_ = 0;
}
inline float NamedScoreProto::_internal_value() const {
  return value_;
}
inline float NamedScoreProto::value() const {
  // @@protoc_insertion_point(field_get:jina.NamedScoreProto.value)
  return _internal_value();
}
inline void NamedScoreProto::_internal_set_value(float value) {
  
  value_ = value;
}
inline void NamedScoreProto::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:jina.NamedScoreProto.value)
}

// string op_name = 2;
inline void NamedScoreProto::clear_op_name() {
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NamedScoreProto::op_name() const {
  // @@protoc_insertion_point(field_get:jina.NamedScoreProto.op_name)
  return _internal_op_name();
}
inline void NamedScoreProto::set_op_name(const std::string& value) {
  _internal_set_op_name(value);
  // @@protoc_insertion_point(field_set:jina.NamedScoreProto.op_name)
}
inline std::string* NamedScoreProto::mutable_op_name() {
  // @@protoc_insertion_point(field_mutable:jina.NamedScoreProto.op_name)
  return _internal_mutable_op_name();
}
inline const std::string& NamedScoreProto::_internal_op_name() const {
  return op_name_.Get();
}
inline void NamedScoreProto::_internal_set_op_name(const std::string& value) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamedScoreProto::set_op_name(std::string&& value) {
  
  op_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.NamedScoreProto.op_name)
}
inline void NamedScoreProto::set_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.NamedScoreProto.op_name)
}
inline void NamedScoreProto::set_op_name(const char* value,
    size_t size) {
  
  op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.NamedScoreProto.op_name)
}
inline std::string* NamedScoreProto::_internal_mutable_op_name() {
  
  return op_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamedScoreProto::release_op_name() {
  // @@protoc_insertion_point(field_release:jina.NamedScoreProto.op_name)
  return op_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedScoreProto::set_allocated_op_name(std::string* op_name) {
  if (op_name != nullptr) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.NamedScoreProto.op_name)
}

// string description = 3;
inline void NamedScoreProto::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NamedScoreProto::description() const {
  // @@protoc_insertion_point(field_get:jina.NamedScoreProto.description)
  return _internal_description();
}
inline void NamedScoreProto::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:jina.NamedScoreProto.description)
}
inline std::string* NamedScoreProto::mutable_description() {
  // @@protoc_insertion_point(field_mutable:jina.NamedScoreProto.description)
  return _internal_mutable_description();
}
inline const std::string& NamedScoreProto::_internal_description() const {
  return description_.Get();
}
inline void NamedScoreProto::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamedScoreProto::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.NamedScoreProto.description)
}
inline void NamedScoreProto::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.NamedScoreProto.description)
}
inline void NamedScoreProto::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.NamedScoreProto.description)
}
inline std::string* NamedScoreProto::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamedScoreProto::release_description() {
  // @@protoc_insertion_point(field_release:jina.NamedScoreProto.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedScoreProto::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.NamedScoreProto.description)
}

// repeated .jina.NamedScoreProto operands = 4;
inline int NamedScoreProto::_internal_operands_size() const {
  return operands_.size();
}
inline int NamedScoreProto::operands_size() const {
  return _internal_operands_size();
}
inline void NamedScoreProto::clear_operands() {
  operands_.Clear();
}
inline ::jina::NamedScoreProto* NamedScoreProto::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:jina.NamedScoreProto.operands)
  return operands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::NamedScoreProto >*
NamedScoreProto::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:jina.NamedScoreProto.operands)
  return &operands_;
}
inline const ::jina::NamedScoreProto& NamedScoreProto::_internal_operands(int index) const {
  return operands_.Get(index);
}
inline const ::jina::NamedScoreProto& NamedScoreProto::operands(int index) const {
  // @@protoc_insertion_point(field_get:jina.NamedScoreProto.operands)
  return _internal_operands(index);
}
inline ::jina::NamedScoreProto* NamedScoreProto::_internal_add_operands() {
  return operands_.Add();
}
inline ::jina::NamedScoreProto* NamedScoreProto::add_operands() {
  // @@protoc_insertion_point(field_add:jina.NamedScoreProto.operands)
  return _internal_add_operands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::NamedScoreProto >&
NamedScoreProto::operands() const {
  // @@protoc_insertion_point(field_list:jina.NamedScoreProto.operands)
  return operands_;
}

// string ref_id = 5;
inline void NamedScoreProto::clear_ref_id() {
  ref_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NamedScoreProto::ref_id() const {
  // @@protoc_insertion_point(field_get:jina.NamedScoreProto.ref_id)
  return _internal_ref_id();
}
inline void NamedScoreProto::set_ref_id(const std::string& value) {
  _internal_set_ref_id(value);
  // @@protoc_insertion_point(field_set:jina.NamedScoreProto.ref_id)
}
inline std::string* NamedScoreProto::mutable_ref_id() {
  // @@protoc_insertion_point(field_mutable:jina.NamedScoreProto.ref_id)
  return _internal_mutable_ref_id();
}
inline const std::string& NamedScoreProto::_internal_ref_id() const {
  return ref_id_.Get();
}
inline void NamedScoreProto::_internal_set_ref_id(const std::string& value) {
  
  ref_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamedScoreProto::set_ref_id(std::string&& value) {
  
  ref_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.NamedScoreProto.ref_id)
}
inline void NamedScoreProto::set_ref_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.NamedScoreProto.ref_id)
}
inline void NamedScoreProto::set_ref_id(const char* value,
    size_t size) {
  
  ref_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.NamedScoreProto.ref_id)
}
inline std::string* NamedScoreProto::_internal_mutable_ref_id() {
  
  return ref_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamedScoreProto::release_ref_id() {
  // @@protoc_insertion_point(field_release:jina.NamedScoreProto.ref_id)
  return ref_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedScoreProto::set_allocated_ref_id(std::string* ref_id) {
  if (ref_id != nullptr) {
    
  } else {
    
  }
  ref_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.NamedScoreProto.ref_id)
}

// -------------------------------------------------------------------

// GraphProto

// .jina.NdArrayProto adjacency = 1;
inline bool GraphProto::_internal_has_adjacency() const {
  return this != internal_default_instance() && adjacency_ != nullptr;
}
inline bool GraphProto::has_adjacency() const {
  return _internal_has_adjacency();
}
inline void GraphProto::clear_adjacency() {
  if (GetArena() == nullptr && adjacency_ != nullptr) {
    delete adjacency_;
  }
  adjacency_ = nullptr;
}
inline const ::jina::NdArrayProto& GraphProto::_internal_adjacency() const {
  const ::jina::NdArrayProto* p = adjacency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::NdArrayProto*>(
      &::jina::_NdArrayProto_default_instance_);
}
inline const ::jina::NdArrayProto& GraphProto::adjacency() const {
  // @@protoc_insertion_point(field_get:jina.GraphProto.adjacency)
  return _internal_adjacency();
}
inline void GraphProto::unsafe_arena_set_allocated_adjacency(
    ::jina::NdArrayProto* adjacency) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjacency_);
  }
  adjacency_ = adjacency;
  if (adjacency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.GraphProto.adjacency)
}
inline ::jina::NdArrayProto* GraphProto::release_adjacency() {
  
  ::jina::NdArrayProto* temp = adjacency_;
  adjacency_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::NdArrayProto* GraphProto::unsafe_arena_release_adjacency() {
  // @@protoc_insertion_point(field_release:jina.GraphProto.adjacency)
  
  ::jina::NdArrayProto* temp = adjacency_;
  adjacency_ = nullptr;
  return temp;
}
inline ::jina::NdArrayProto* GraphProto::_internal_mutable_adjacency() {
  
  if (adjacency_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::NdArrayProto>(GetArena());
    adjacency_ = p;
  }
  return adjacency_;
}
inline ::jina::NdArrayProto* GraphProto::mutable_adjacency() {
  // @@protoc_insertion_point(field_mutable:jina.GraphProto.adjacency)
  return _internal_mutable_adjacency();
}
inline void GraphProto::set_allocated_adjacency(::jina::NdArrayProto* adjacency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete adjacency_;
  }
  if (adjacency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(adjacency);
    if (message_arena != submessage_arena) {
      adjacency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjacency, submessage_arena);
    }
    
  } else {
    
  }
  adjacency_ = adjacency;
  // @@protoc_insertion_point(field_set_allocated:jina.GraphProto.adjacency)
}

// .google.protobuf.Struct edge_features = 2;
inline bool GraphProto::_internal_has_edge_features() const {
  return this != internal_default_instance() && edge_features_ != nullptr;
}
inline bool GraphProto::has_edge_features() const {
  return _internal_has_edge_features();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GraphProto::_internal_edge_features() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = edge_features_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& GraphProto::edge_features() const {
  // @@protoc_insertion_point(field_get:jina.GraphProto.edge_features)
  return _internal_edge_features();
}
inline void GraphProto::unsafe_arena_set_allocated_edge_features(
    PROTOBUF_NAMESPACE_ID::Struct* edge_features) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_features_);
  }
  edge_features_ = edge_features;
  if (edge_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.GraphProto.edge_features)
}
inline PROTOBUF_NAMESPACE_ID::Struct* GraphProto::release_edge_features() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = edge_features_;
  edge_features_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GraphProto::unsafe_arena_release_edge_features() {
  // @@protoc_insertion_point(field_release:jina.GraphProto.edge_features)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = edge_features_;
  edge_features_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GraphProto::_internal_mutable_edge_features() {
  
  if (edge_features_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    edge_features_ = p;
  }
  return edge_features_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* GraphProto::mutable_edge_features() {
  // @@protoc_insertion_point(field_mutable:jina.GraphProto.edge_features)
  return _internal_mutable_edge_features();
}
inline void GraphProto::set_allocated_edge_features(PROTOBUF_NAMESPACE_ID::Struct* edge_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_features_);
  }
  if (edge_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_features)->GetArena();
    if (message_arena != submessage_arena) {
      edge_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_features, submessage_arena);
    }
    
  } else {
    
  }
  edge_features_ = edge_features;
  // @@protoc_insertion_point(field_set_allocated:jina.GraphProto.edge_features)
}

// bool undirected = 3;
inline void GraphProto::clear_undirected() {
  undirected_ = false;
}
inline bool GraphProto::_internal_undirected() const {
  return undirected_;
}
inline bool GraphProto::undirected() const {
  // @@protoc_insertion_point(field_get:jina.GraphProto.undirected)
  return _internal_undirected();
}
inline void GraphProto::_internal_set_undirected(bool value) {
  
  undirected_ = value;
}
inline void GraphProto::set_undirected(bool value) {
  _internal_set_undirected(value);
  // @@protoc_insertion_point(field_set:jina.GraphProto.undirected)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DocumentProto

// string id = 1;
inline void DocumentProto::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentProto::id() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.id)
  return _internal_id();
}
inline void DocumentProto::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.id)
}
inline std::string* DocumentProto::mutable_id() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.id)
  return _internal_mutable_id();
}
inline const std::string& DocumentProto::_internal_id() const {
  return id_.Get();
}
inline void DocumentProto::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentProto::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.DocumentProto.id)
}
inline void DocumentProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.DocumentProto.id)
}
inline void DocumentProto::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.DocumentProto.id)
}
inline std::string* DocumentProto::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentProto::release_id() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.DocumentProto.id)
}

// uint32 granularity = 14;
inline void DocumentProto::clear_granularity() {
  granularity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentProto::_internal_granularity() const {
  return granularity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentProto::granularity() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.granularity)
  return _internal_granularity();
}
inline void DocumentProto::_internal_set_granularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  granularity_ = value;
}
inline void DocumentProto::set_granularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_granularity(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.granularity)
}

// uint32 adjacency = 22;
inline void DocumentProto::clear_adjacency() {
  adjacency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentProto::_internal_adjacency() const {
  return adjacency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentProto::adjacency() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.adjacency)
  return _internal_adjacency();
}
inline void DocumentProto::_internal_set_adjacency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  adjacency_ = value;
}
inline void DocumentProto::set_adjacency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_adjacency(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.adjacency)
}

// string parent_id = 16;
inline void DocumentProto::clear_parent_id() {
  parent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentProto::parent_id() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.parent_id)
  return _internal_parent_id();
}
inline void DocumentProto::set_parent_id(const std::string& value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.parent_id)
}
inline std::string* DocumentProto::mutable_parent_id() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.parent_id)
  return _internal_mutable_parent_id();
}
inline const std::string& DocumentProto::_internal_parent_id() const {
  return parent_id_.Get();
}
inline void DocumentProto::_internal_set_parent_id(const std::string& value) {
  
  parent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentProto::set_parent_id(std::string&& value) {
  
  parent_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.DocumentProto.parent_id)
}
inline void DocumentProto::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.DocumentProto.parent_id)
}
inline void DocumentProto::set_parent_id(const char* value,
    size_t size) {
  
  parent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.DocumentProto.parent_id)
}
inline std::string* DocumentProto::_internal_mutable_parent_id() {
  
  return parent_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentProto::release_parent_id() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.parent_id)
  return parent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentProto::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.DocumentProto.parent_id)
}

// bytes buffer = 3;
inline bool DocumentProto::_internal_has_buffer() const {
  return content_case() == kBuffer;
}
inline void DocumentProto::set_has_buffer() {
  _oneof_case_[0] = kBuffer;
}
inline void DocumentProto::clear_buffer() {
  if (_internal_has_buffer()) {
    content_.buffer_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_content();
  }
}
inline const std::string& DocumentProto::buffer() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.buffer)
  return _internal_buffer();
}
inline void DocumentProto::set_buffer(const std::string& value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.buffer)
}
inline std::string* DocumentProto::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.buffer)
  return _internal_mutable_buffer();
}
inline const std::string& DocumentProto::_internal_buffer() const {
  if (_internal_has_buffer()) {
    return content_.buffer_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DocumentProto::_internal_set_buffer(const std::string& value) {
  if (!_internal_has_buffer()) {
    clear_content();
    set_has_buffer();
    content_.buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentProto::set_buffer(std::string&& value) {
  // @@protoc_insertion_point(field_set:jina.DocumentProto.buffer)
  if (!_internal_has_buffer()) {
    clear_content();
    set_has_buffer();
    content_.buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.buffer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.DocumentProto.buffer)
}
inline void DocumentProto::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_buffer()) {
    clear_content();
    set_has_buffer();
    content_.buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jina.DocumentProto.buffer)
}
inline void DocumentProto::set_buffer(const void* value,
                             size_t size) {
  if (!_internal_has_buffer()) {
    clear_content();
    set_has_buffer();
    content_.buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.buffer_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.DocumentProto.buffer)
}
inline std::string* DocumentProto::_internal_mutable_buffer() {
  if (!_internal_has_buffer()) {
    clear_content();
    set_has_buffer();
    content_.buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return content_.buffer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentProto::release_buffer() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.buffer)
  if (_internal_has_buffer()) {
    clear_has_content();
    return content_.buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DocumentProto::set_allocated_buffer(std::string* buffer) {
  if (has_content()) {
    clear_content();
  }
  if (buffer != nullptr) {
    set_has_buffer();
    content_.buffer_.UnsafeSetDefault(buffer);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(buffer);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:jina.DocumentProto.buffer)
}

// .jina.NdArrayProto blob = 12;
inline bool DocumentProto::_internal_has_blob() const {
  return content_case() == kBlob;
}
inline bool DocumentProto::has_blob() const {
  return _internal_has_blob();
}
inline void DocumentProto::set_has_blob() {
  _oneof_case_[0] = kBlob;
}
inline void DocumentProto::clear_blob() {
  if (_internal_has_blob()) {
    if (GetArena() == nullptr) {
      delete content_.blob_;
    }
    clear_has_content();
  }
}
inline ::jina::NdArrayProto* DocumentProto::release_blob() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.blob)
  if (_internal_has_blob()) {
    clear_has_content();
      ::jina::NdArrayProto* temp = content_.blob_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.blob_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jina::NdArrayProto& DocumentProto::_internal_blob() const {
  return _internal_has_blob()
      ? *content_.blob_
      : *reinterpret_cast< ::jina::NdArrayProto*>(&::jina::_NdArrayProto_default_instance_);
}
inline const ::jina::NdArrayProto& DocumentProto::blob() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.blob)
  return _internal_blob();
}
inline ::jina::NdArrayProto* DocumentProto::unsafe_arena_release_blob() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jina.DocumentProto.blob)
  if (_internal_has_blob()) {
    clear_has_content();
    ::jina::NdArrayProto* temp = content_.blob_;
    content_.blob_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DocumentProto::unsafe_arena_set_allocated_blob(::jina::NdArrayProto* blob) {
  clear_content();
  if (blob) {
    set_has_blob();
    content_.blob_ = blob;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.DocumentProto.blob)
}
inline ::jina::NdArrayProto* DocumentProto::_internal_mutable_blob() {
  if (!_internal_has_blob()) {
    clear_content();
    set_has_blob();
    content_.blob_ = CreateMaybeMessage< ::jina::NdArrayProto >(GetArena());
  }
  return content_.blob_;
}
inline ::jina::NdArrayProto* DocumentProto::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.blob)
  return _internal_mutable_blob();
}

// string text = 13;
inline bool DocumentProto::_internal_has_text() const {
  return content_case() == kText;
}
inline void DocumentProto::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void DocumentProto::clear_text() {
  if (_internal_has_text()) {
    content_.text_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_content();
  }
}
inline const std::string& DocumentProto::text() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.text)
  return _internal_text();
}
inline void DocumentProto::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.text)
}
inline std::string* DocumentProto::mutable_text() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.text)
  return _internal_mutable_text();
}
inline const std::string& DocumentProto::_internal_text() const {
  if (_internal_has_text()) {
    return content_.text_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DocumentProto::_internal_set_text(const std::string& value) {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentProto::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:jina.DocumentProto.text)
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.DocumentProto.text)
}
inline void DocumentProto::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:jina.DocumentProto.text)
}
inline void DocumentProto::set_text(const char* value,
                             size_t size) {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.DocumentProto.text)
}
inline std::string* DocumentProto::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return content_.text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentProto::release_text() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.text)
  if (_internal_has_text()) {
    clear_has_content();
    return content_.text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DocumentProto::set_allocated_text(std::string* text) {
  if (has_content()) {
    clear_content();
  }
  if (text != nullptr) {
    set_has_text();
    content_.text_.UnsafeSetDefault(text);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(text);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:jina.DocumentProto.text)
}

// .jina.GraphProto graph = 27;
inline bool DocumentProto::_internal_has_graph() const {
  return content_case() == kGraph;
}
inline bool DocumentProto::has_graph() const {
  return _internal_has_graph();
}
inline void DocumentProto::set_has_graph() {
  _oneof_case_[0] = kGraph;
}
inline void DocumentProto::clear_graph() {
  if (_internal_has_graph()) {
    if (GetArena() == nullptr) {
      delete content_.graph_;
    }
    clear_has_content();
  }
}
inline ::jina::GraphProto* DocumentProto::release_graph() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.graph)
  if (_internal_has_graph()) {
    clear_has_content();
      ::jina::GraphProto* temp = content_.graph_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jina::GraphProto& DocumentProto::_internal_graph() const {
  return _internal_has_graph()
      ? *content_.graph_
      : *reinterpret_cast< ::jina::GraphProto*>(&::jina::_GraphProto_default_instance_);
}
inline const ::jina::GraphProto& DocumentProto::graph() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.graph)
  return _internal_graph();
}
inline ::jina::GraphProto* DocumentProto::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jina.DocumentProto.graph)
  if (_internal_has_graph()) {
    clear_has_content();
    ::jina::GraphProto* temp = content_.graph_;
    content_.graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DocumentProto::unsafe_arena_set_allocated_graph(::jina::GraphProto* graph) {
  clear_content();
  if (graph) {
    set_has_graph();
    content_.graph_ = graph;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.DocumentProto.graph)
}
inline ::jina::GraphProto* DocumentProto::_internal_mutable_graph() {
  if (!_internal_has_graph()) {
    clear_content();
    set_has_graph();
    content_.graph_ = CreateMaybeMessage< ::jina::GraphProto >(GetArena());
  }
  return content_.graph_;
}
inline ::jina::GraphProto* DocumentProto::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.graph)
  return _internal_mutable_graph();
}

// repeated .jina.DocumentProto chunks = 4;
inline int DocumentProto::_internal_chunks_size() const {
  return chunks_.size();
}
inline int DocumentProto::chunks_size() const {
  return _internal_chunks_size();
}
inline void DocumentProto::clear_chunks() {
  chunks_.Clear();
}
inline ::jina::DocumentProto* DocumentProto::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.chunks)
  return chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
DocumentProto::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:jina.DocumentProto.chunks)
  return &chunks_;
}
inline const ::jina::DocumentProto& DocumentProto::_internal_chunks(int index) const {
  return chunks_.Get(index);
}
inline const ::jina::DocumentProto& DocumentProto::chunks(int index) const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.chunks)
  return _internal_chunks(index);
}
inline ::jina::DocumentProto* DocumentProto::_internal_add_chunks() {
  return chunks_.Add();
}
inline ::jina::DocumentProto* DocumentProto::add_chunks() {
  // @@protoc_insertion_point(field_add:jina.DocumentProto.chunks)
  return _internal_add_chunks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
DocumentProto::chunks() const {
  // @@protoc_insertion_point(field_list:jina.DocumentProto.chunks)
  return chunks_;
}

// float weight = 5;
inline void DocumentProto::clear_weight() {
  weight_ = 0;
}
inline float DocumentProto::_internal_weight() const {
  return weight_;
}
inline float DocumentProto::weight() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.weight)
  return _internal_weight();
}
inline void DocumentProto::_internal_set_weight(float value) {
  
  weight_ = value;
}
inline void DocumentProto::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.weight)
}

// repeated .jina.DocumentProto matches = 8;
inline int DocumentProto::_internal_matches_size() const {
  return matches_.size();
}
inline int DocumentProto::matches_size() const {
  return _internal_matches_size();
}
inline void DocumentProto::clear_matches() {
  matches_.Clear();
}
inline ::jina::DocumentProto* DocumentProto::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
DocumentProto::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:jina.DocumentProto.matches)
  return &matches_;
}
inline const ::jina::DocumentProto& DocumentProto::_internal_matches(int index) const {
  return matches_.Get(index);
}
inline const ::jina::DocumentProto& DocumentProto::matches(int index) const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.matches)
  return _internal_matches(index);
}
inline ::jina::DocumentProto* DocumentProto::_internal_add_matches() {
  return matches_.Add();
}
inline ::jina::DocumentProto* DocumentProto::add_matches() {
  // @@protoc_insertion_point(field_add:jina.DocumentProto.matches)
  return _internal_add_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
DocumentProto::matches() const {
  // @@protoc_insertion_point(field_list:jina.DocumentProto.matches)
  return matches_;
}

// string uri = 9;
inline void DocumentProto::clear_uri() {
  uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentProto::uri() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.uri)
  return _internal_uri();
}
inline void DocumentProto::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.uri)
}
inline std::string* DocumentProto::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.uri)
  return _internal_mutable_uri();
}
inline const std::string& DocumentProto::_internal_uri() const {
  return uri_.Get();
}
inline void DocumentProto::_internal_set_uri(const std::string& value) {
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentProto::set_uri(std::string&& value) {
  
  uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.DocumentProto.uri)
}
inline void DocumentProto::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.DocumentProto.uri)
}
inline void DocumentProto::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.DocumentProto.uri)
}
inline std::string* DocumentProto::_internal_mutable_uri() {
  
  return uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentProto::release_uri() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentProto::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.DocumentProto.uri)
}

// string mime_type = 10;
inline void DocumentProto::clear_mime_type() {
  mime_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentProto::mime_type() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.mime_type)
  return _internal_mime_type();
}
inline void DocumentProto::set_mime_type(const std::string& value) {
  _internal_set_mime_type(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.mime_type)
}
inline std::string* DocumentProto::mutable_mime_type() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.mime_type)
  return _internal_mutable_mime_type();
}
inline const std::string& DocumentProto::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void DocumentProto::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentProto::set_mime_type(std::string&& value) {
  
  mime_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.DocumentProto.mime_type)
}
inline void DocumentProto::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mime_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.DocumentProto.mime_type)
}
inline void DocumentProto::set_mime_type(const char* value,
    size_t size) {
  
  mime_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.DocumentProto.mime_type)
}
inline std::string* DocumentProto::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentProto::release_mime_type() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.mime_type)
  return mime_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentProto::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mime_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.DocumentProto.mime_type)
}

// .google.protobuf.Struct tags = 11;
inline bool DocumentProto::_internal_has_tags() const {
  return this != internal_default_instance() && tags_ != nullptr;
}
inline bool DocumentProto::has_tags() const {
  return _internal_has_tags();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DocumentProto::_internal_tags() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = tags_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DocumentProto::tags() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.tags)
  return _internal_tags();
}
inline void DocumentProto::unsafe_arena_set_allocated_tags(
    PROTOBUF_NAMESPACE_ID::Struct* tags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tags_);
  }
  tags_ = tags;
  if (tags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.DocumentProto.tags)
}
inline PROTOBUF_NAMESPACE_ID::Struct* DocumentProto::release_tags() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = tags_;
  tags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DocumentProto::unsafe_arena_release_tags() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.tags)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = tags_;
  tags_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DocumentProto::_internal_mutable_tags() {
  
  if (tags_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    tags_ = p;
  }
  return tags_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DocumentProto::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.tags)
  return _internal_mutable_tags();
}
inline void DocumentProto::set_allocated_tags(PROTOBUF_NAMESPACE_ID::Struct* tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tags_);
  }
  if (tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tags)->GetArena();
    if (message_arena != submessage_arena) {
      tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tags, submessage_arena);
    }
    
  } else {
    
  }
  tags_ = tags;
  // @@protoc_insertion_point(field_set_allocated:jina.DocumentProto.tags)
}

// repeated float location = 17;
inline int DocumentProto::_internal_location_size() const {
  return location_.size();
}
inline int DocumentProto::location_size() const {
  return _internal_location_size();
}
inline void DocumentProto::clear_location() {
  location_.Clear();
}
inline float DocumentProto::_internal_location(int index) const {
  return location_.Get(index);
}
inline float DocumentProto::location(int index) const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.location)
  return _internal_location(index);
}
inline void DocumentProto::set_location(int index, float value) {
  location_.Set(index, value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.location)
}
inline void DocumentProto::_internal_add_location(float value) {
  location_.Add(value);
}
inline void DocumentProto::add_location(float value) {
  _internal_add_location(value);
  // @@protoc_insertion_point(field_add:jina.DocumentProto.location)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DocumentProto::_internal_location() const {
  return location_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DocumentProto::location() const {
  // @@protoc_insertion_point(field_list:jina.DocumentProto.location)
  return _internal_location();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DocumentProto::_internal_mutable_location() {
  return &location_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DocumentProto::mutable_location() {
  // @@protoc_insertion_point(field_mutable_list:jina.DocumentProto.location)
  return _internal_mutable_location();
}

// float offset = 18;
inline void DocumentProto::clear_offset() {
  offset_ = 0;
}
inline float DocumentProto::_internal_offset() const {
  return offset_;
}
inline float DocumentProto::offset() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.offset)
  return _internal_offset();
}
inline void DocumentProto::_internal_set_offset(float value) {
  
  offset_ = value;
}
inline void DocumentProto::set_offset(float value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.offset)
}

// .jina.NdArrayProto embedding = 19;
inline bool DocumentProto::_internal_has_embedding() const {
  return this != internal_default_instance() && embedding_ != nullptr;
}
inline bool DocumentProto::has_embedding() const {
  return _internal_has_embedding();
}
inline void DocumentProto::clear_embedding() {
  if (GetArena() == nullptr && embedding_ != nullptr) {
    delete embedding_;
  }
  embedding_ = nullptr;
}
inline const ::jina::NdArrayProto& DocumentProto::_internal_embedding() const {
  const ::jina::NdArrayProto* p = embedding_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::NdArrayProto*>(
      &::jina::_NdArrayProto_default_instance_);
}
inline const ::jina::NdArrayProto& DocumentProto::embedding() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.embedding)
  return _internal_embedding();
}
inline void DocumentProto::unsafe_arena_set_allocated_embedding(
    ::jina::NdArrayProto* embedding) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(embedding_);
  }
  embedding_ = embedding;
  if (embedding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.DocumentProto.embedding)
}
inline ::jina::NdArrayProto* DocumentProto::release_embedding() {
  
  ::jina::NdArrayProto* temp = embedding_;
  embedding_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::NdArrayProto* DocumentProto::unsafe_arena_release_embedding() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.embedding)
  
  ::jina::NdArrayProto* temp = embedding_;
  embedding_ = nullptr;
  return temp;
}
inline ::jina::NdArrayProto* DocumentProto::_internal_mutable_embedding() {
  
  if (embedding_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::NdArrayProto>(GetArena());
    embedding_ = p;
  }
  return embedding_;
}
inline ::jina::NdArrayProto* DocumentProto::mutable_embedding() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.embedding)
  return _internal_mutable_embedding();
}
inline void DocumentProto::set_allocated_embedding(::jina::NdArrayProto* embedding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete embedding_;
  }
  if (embedding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(embedding);
    if (message_arena != submessage_arena) {
      embedding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedding, submessage_arena);
    }
    
  } else {
    
  }
  embedding_ = embedding;
  // @@protoc_insertion_point(field_set_allocated:jina.DocumentProto.embedding)
}

// map<string, .jina.NamedScoreProto> scores = 28;
inline int DocumentProto::_internal_scores_size() const {
  return scores_.size();
}
inline int DocumentProto::scores_size() const {
  return _internal_scores_size();
}
inline void DocumentProto::clear_scores() {
  scores_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >&
DocumentProto::_internal_scores() const {
  return scores_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >&
DocumentProto::scores() const {
  // @@protoc_insertion_point(field_map:jina.DocumentProto.scores)
  return _internal_scores();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >*
DocumentProto::_internal_mutable_scores() {
  return scores_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >*
DocumentProto::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_map:jina.DocumentProto.scores)
  return _internal_mutable_scores();
}

// string modality = 21;
inline void DocumentProto::clear_modality() {
  modality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentProto::modality() const {
  // @@protoc_insertion_point(field_get:jina.DocumentProto.modality)
  return _internal_modality();
}
inline void DocumentProto::set_modality(const std::string& value) {
  _internal_set_modality(value);
  // @@protoc_insertion_point(field_set:jina.DocumentProto.modality)
}
inline std::string* DocumentProto::mutable_modality() {
  // @@protoc_insertion_point(field_mutable:jina.DocumentProto.modality)
  return _internal_mutable_modality();
}
inline const std::string& DocumentProto::_internal_modality() const {
  return modality_.Get();
}
inline void DocumentProto::_internal_set_modality(const std::string& value) {
  
  modality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentProto::set_modality(std::string&& value) {
  
  modality_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.DocumentProto.modality)
}
inline void DocumentProto::set_modality(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.DocumentProto.modality)
}
inline void DocumentProto::set_modality(const char* value,
    size_t size) {
  
  modality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.DocumentProto.modality)
}
inline std::string* DocumentProto::_internal_mutable_modality() {
  
  return modality_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentProto::release_modality() {
  // @@protoc_insertion_point(field_release:jina.DocumentProto.modality)
  return modality_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentProto::set_allocated_modality(std::string* modality) {
  if (modality != nullptr) {
    
  } else {
    
  }
  modality_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modality,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.DocumentProto.modality)
}

// map<string, .jina.NamedScoreProto> evaluations = 29;
inline int DocumentProto::_internal_evaluations_size() const {
  return evaluations_.size();
}
inline int DocumentProto::evaluations_size() const {
  return _internal_evaluations_size();
}
inline void DocumentProto::clear_evaluations() {
  evaluations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >&
DocumentProto::_internal_evaluations() const {
  return evaluations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >&
DocumentProto::evaluations() const {
  // @@protoc_insertion_point(field_map:jina.DocumentProto.evaluations)
  return _internal_evaluations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >*
DocumentProto::_internal_mutable_evaluations() {
  return evaluations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::NamedScoreProto >*
DocumentProto::mutable_evaluations() {
  // @@protoc_insertion_point(field_mutable_map:jina.DocumentProto.evaluations)
  return _internal_mutable_evaluations();
}

inline bool DocumentProto::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void DocumentProto::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline DocumentProto::ContentCase DocumentProto::content_case() const {
  return DocumentProto::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RouteProto

// string pod = 1;
inline void RouteProto::clear_pod() {
  pod_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RouteProto::pod() const {
  // @@protoc_insertion_point(field_get:jina.RouteProto.pod)
  return _internal_pod();
}
inline void RouteProto::set_pod(const std::string& value) {
  _internal_set_pod(value);
  // @@protoc_insertion_point(field_set:jina.RouteProto.pod)
}
inline std::string* RouteProto::mutable_pod() {
  // @@protoc_insertion_point(field_mutable:jina.RouteProto.pod)
  return _internal_mutable_pod();
}
inline const std::string& RouteProto::_internal_pod() const {
  return pod_.Get();
}
inline void RouteProto::_internal_set_pod(const std::string& value) {
  
  pod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RouteProto::set_pod(std::string&& value) {
  
  pod_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.RouteProto.pod)
}
inline void RouteProto::set_pod(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.RouteProto.pod)
}
inline void RouteProto::set_pod(const char* value,
    size_t size) {
  
  pod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.RouteProto.pod)
}
inline std::string* RouteProto::_internal_mutable_pod() {
  
  return pod_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RouteProto::release_pod() {
  // @@protoc_insertion_point(field_release:jina.RouteProto.pod)
  return pod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RouteProto::set_allocated_pod(std::string* pod) {
  if (pod != nullptr) {
    
  } else {
    
  }
  pod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.RouteProto.pod)
}

// string pod_id = 2;
inline void RouteProto::clear_pod_id() {
  pod_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RouteProto::pod_id() const {
  // @@protoc_insertion_point(field_get:jina.RouteProto.pod_id)
  return _internal_pod_id();
}
inline void RouteProto::set_pod_id(const std::string& value) {
  _internal_set_pod_id(value);
  // @@protoc_insertion_point(field_set:jina.RouteProto.pod_id)
}
inline std::string* RouteProto::mutable_pod_id() {
  // @@protoc_insertion_point(field_mutable:jina.RouteProto.pod_id)
  return _internal_mutable_pod_id();
}
inline const std::string& RouteProto::_internal_pod_id() const {
  return pod_id_.Get();
}
inline void RouteProto::_internal_set_pod_id(const std::string& value) {
  
  pod_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RouteProto::set_pod_id(std::string&& value) {
  
  pod_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.RouteProto.pod_id)
}
inline void RouteProto::set_pod_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.RouteProto.pod_id)
}
inline void RouteProto::set_pod_id(const char* value,
    size_t size) {
  
  pod_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.RouteProto.pod_id)
}
inline std::string* RouteProto::_internal_mutable_pod_id() {
  
  return pod_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RouteProto::release_pod_id() {
  // @@protoc_insertion_point(field_release:jina.RouteProto.pod_id)
  return pod_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RouteProto::set_allocated_pod_id(std::string* pod_id) {
  if (pod_id != nullptr) {
    
  } else {
    
  }
  pod_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.RouteProto.pod_id)
}

// .google.protobuf.Timestamp start_time = 3;
inline bool RouteProto::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool RouteProto::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RouteProto::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RouteProto::start_time() const {
  // @@protoc_insertion_point(field_get:jina.RouteProto.start_time)
  return _internal_start_time();
}
inline void RouteProto::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.RouteProto.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RouteProto::release_start_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RouteProto::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:jina.RouteProto.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RouteProto::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RouteProto::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:jina.RouteProto.start_time)
  return _internal_mutable_start_time();
}
inline void RouteProto::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:jina.RouteProto.start_time)
}

// .google.protobuf.Timestamp end_time = 4;
inline bool RouteProto::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool RouteProto::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RouteProto::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RouteProto::end_time() const {
  // @@protoc_insertion_point(field_get:jina.RouteProto.end_time)
  return _internal_end_time();
}
inline void RouteProto::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.RouteProto.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RouteProto::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RouteProto::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:jina.RouteProto.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RouteProto::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RouteProto::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:jina.RouteProto.end_time)
  return _internal_mutable_end_time();
}
inline void RouteProto::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:jina.RouteProto.end_time)
}

// .jina.StatusProto status = 5;
inline bool RouteProto::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RouteProto::has_status() const {
  return _internal_has_status();
}
inline void RouteProto::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::jina::StatusProto& RouteProto::_internal_status() const {
  const ::jina::StatusProto* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::StatusProto*>(
      &::jina::_StatusProto_default_instance_);
}
inline const ::jina::StatusProto& RouteProto::status() const {
  // @@protoc_insertion_point(field_get:jina.RouteProto.status)
  return _internal_status();
}
inline void RouteProto::unsafe_arena_set_allocated_status(
    ::jina::StatusProto* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.RouteProto.status)
}
inline ::jina::StatusProto* RouteProto::release_status() {
  
  ::jina::StatusProto* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::StatusProto* RouteProto::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:jina.RouteProto.status)
  
  ::jina::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::jina::StatusProto* RouteProto::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::StatusProto>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::jina::StatusProto* RouteProto::mutable_status() {
  // @@protoc_insertion_point(field_mutable:jina.RouteProto.status)
  return _internal_mutable_status();
}
inline void RouteProto::set_allocated_status(::jina::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:jina.RouteProto.status)
}

// -------------------------------------------------------------------

// TargetPodProto

// string host = 1;
inline void TargetPodProto::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TargetPodProto::host() const {
  // @@protoc_insertion_point(field_get:jina.TargetPodProto.host)
  return _internal_host();
}
inline void TargetPodProto::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:jina.TargetPodProto.host)
}
inline std::string* TargetPodProto::mutable_host() {
  // @@protoc_insertion_point(field_mutable:jina.TargetPodProto.host)
  return _internal_mutable_host();
}
inline const std::string& TargetPodProto::_internal_host() const {
  return host_.Get();
}
inline void TargetPodProto::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TargetPodProto::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.TargetPodProto.host)
}
inline void TargetPodProto::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.TargetPodProto.host)
}
inline void TargetPodProto::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.TargetPodProto.host)
}
inline std::string* TargetPodProto::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TargetPodProto::release_host() {
  // @@protoc_insertion_point(field_release:jina.TargetPodProto.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TargetPodProto::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.TargetPodProto.host)
}

// uint32 port = 2;
inline void TargetPodProto::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPodProto::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPodProto::port() const {
  // @@protoc_insertion_point(field_get:jina.TargetPodProto.port)
  return _internal_port();
}
inline void TargetPodProto::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void TargetPodProto::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:jina.TargetPodProto.port)
}

// uint32 port_out = 6;
inline void TargetPodProto::clear_port_out() {
  port_out_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPodProto::_internal_port_out() const {
  return port_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPodProto::port_out() const {
  // @@protoc_insertion_point(field_get:jina.TargetPodProto.port_out)
  return _internal_port_out();
}
inline void TargetPodProto::_internal_set_port_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_out_ = value;
}
inline void TargetPodProto::set_port_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_out(value);
  // @@protoc_insertion_point(field_set:jina.TargetPodProto.port_out)
}

// uint32 expected_parts = 3;
inline void TargetPodProto::clear_expected_parts() {
  expected_parts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPodProto::_internal_expected_parts() const {
  return expected_parts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPodProto::expected_parts() const {
  // @@protoc_insertion_point(field_get:jina.TargetPodProto.expected_parts)
  return _internal_expected_parts();
}
inline void TargetPodProto::_internal_set_expected_parts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expected_parts_ = value;
}
inline void TargetPodProto::set_expected_parts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expected_parts(value);
  // @@protoc_insertion_point(field_set:jina.TargetPodProto.expected_parts)
}

// repeated .jina.RoutingEdgeProto out_edges = 4;
inline int TargetPodProto::_internal_out_edges_size() const {
  return out_edges_.size();
}
inline int TargetPodProto::out_edges_size() const {
  return _internal_out_edges_size();
}
inline void TargetPodProto::clear_out_edges() {
  out_edges_.Clear();
}
inline ::jina::RoutingEdgeProto* TargetPodProto::mutable_out_edges(int index) {
  // @@protoc_insertion_point(field_mutable:jina.TargetPodProto.out_edges)
  return out_edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RoutingEdgeProto >*
TargetPodProto::mutable_out_edges() {
  // @@protoc_insertion_point(field_mutable_list:jina.TargetPodProto.out_edges)
  return &out_edges_;
}
inline const ::jina::RoutingEdgeProto& TargetPodProto::_internal_out_edges(int index) const {
  return out_edges_.Get(index);
}
inline const ::jina::RoutingEdgeProto& TargetPodProto::out_edges(int index) const {
  // @@protoc_insertion_point(field_get:jina.TargetPodProto.out_edges)
  return _internal_out_edges(index);
}
inline ::jina::RoutingEdgeProto* TargetPodProto::_internal_add_out_edges() {
  return out_edges_.Add();
}
inline ::jina::RoutingEdgeProto* TargetPodProto::add_out_edges() {
  // @@protoc_insertion_point(field_add:jina.TargetPodProto.out_edges)
  return _internal_add_out_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RoutingEdgeProto >&
TargetPodProto::out_edges() const {
  // @@protoc_insertion_point(field_list:jina.TargetPodProto.out_edges)
  return out_edges_;
}

// string target_identity = 5;
inline void TargetPodProto::clear_target_identity() {
  target_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TargetPodProto::target_identity() const {
  // @@protoc_insertion_point(field_get:jina.TargetPodProto.target_identity)
  return _internal_target_identity();
}
inline void TargetPodProto::set_target_identity(const std::string& value) {
  _internal_set_target_identity(value);
  // @@protoc_insertion_point(field_set:jina.TargetPodProto.target_identity)
}
inline std::string* TargetPodProto::mutable_target_identity() {
  // @@protoc_insertion_point(field_mutable:jina.TargetPodProto.target_identity)
  return _internal_mutable_target_identity();
}
inline const std::string& TargetPodProto::_internal_target_identity() const {
  return target_identity_.Get();
}
inline void TargetPodProto::_internal_set_target_identity(const std::string& value) {
  
  target_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TargetPodProto::set_target_identity(std::string&& value) {
  
  target_identity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.TargetPodProto.target_identity)
}
inline void TargetPodProto::set_target_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.TargetPodProto.target_identity)
}
inline void TargetPodProto::set_target_identity(const char* value,
    size_t size) {
  
  target_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.TargetPodProto.target_identity)
}
inline std::string* TargetPodProto::_internal_mutable_target_identity() {
  
  return target_identity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TargetPodProto::release_target_identity() {
  // @@protoc_insertion_point(field_release:jina.TargetPodProto.target_identity)
  return target_identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TargetPodProto::set_allocated_target_identity(std::string* target_identity) {
  if (target_identity != nullptr) {
    
  } else {
    
  }
  target_identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_identity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.TargetPodProto.target_identity)
}

// -------------------------------------------------------------------

// RoutingEdgeProto

// string pod = 1;
inline void RoutingEdgeProto::clear_pod() {
  pod_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoutingEdgeProto::pod() const {
  // @@protoc_insertion_point(field_get:jina.RoutingEdgeProto.pod)
  return _internal_pod();
}
inline void RoutingEdgeProto::set_pod(const std::string& value) {
  _internal_set_pod(value);
  // @@protoc_insertion_point(field_set:jina.RoutingEdgeProto.pod)
}
inline std::string* RoutingEdgeProto::mutable_pod() {
  // @@protoc_insertion_point(field_mutable:jina.RoutingEdgeProto.pod)
  return _internal_mutable_pod();
}
inline const std::string& RoutingEdgeProto::_internal_pod() const {
  return pod_.Get();
}
inline void RoutingEdgeProto::_internal_set_pod(const std::string& value) {
  
  pod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoutingEdgeProto::set_pod(std::string&& value) {
  
  pod_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.RoutingEdgeProto.pod)
}
inline void RoutingEdgeProto::set_pod(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.RoutingEdgeProto.pod)
}
inline void RoutingEdgeProto::set_pod(const char* value,
    size_t size) {
  
  pod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.RoutingEdgeProto.pod)
}
inline std::string* RoutingEdgeProto::_internal_mutable_pod() {
  
  return pod_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoutingEdgeProto::release_pod() {
  // @@protoc_insertion_point(field_release:jina.RoutingEdgeProto.pod)
  return pod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoutingEdgeProto::set_allocated_pod(std::string* pod) {
  if (pod != nullptr) {
    
  } else {
    
  }
  pod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.RoutingEdgeProto.pod)
}

// bool send_as_bind = 2;
inline void RoutingEdgeProto::clear_send_as_bind() {
  send_as_bind_ = false;
}
inline bool RoutingEdgeProto::_internal_send_as_bind() const {
  return send_as_bind_;
}
inline bool RoutingEdgeProto::send_as_bind() const {
  // @@protoc_insertion_point(field_get:jina.RoutingEdgeProto.send_as_bind)
  return _internal_send_as_bind();
}
inline void RoutingEdgeProto::_internal_set_send_as_bind(bool value) {
  
  send_as_bind_ = value;
}
inline void RoutingEdgeProto::set_send_as_bind(bool value) {
  _internal_set_send_as_bind(value);
  // @@protoc_insertion_point(field_set:jina.RoutingEdgeProto.send_as_bind)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RoutingTableProto

// map<string, .jina.TargetPodProto> pods = 1;
inline int RoutingTableProto::_internal_pods_size() const {
  return pods_.size();
}
inline int RoutingTableProto::pods_size() const {
  return _internal_pods_size();
}
inline void RoutingTableProto::clear_pods() {
  pods_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::TargetPodProto >&
RoutingTableProto::_internal_pods() const {
  return pods_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::TargetPodProto >&
RoutingTableProto::pods() const {
  // @@protoc_insertion_point(field_map:jina.RoutingTableProto.pods)
  return _internal_pods();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::TargetPodProto >*
RoutingTableProto::_internal_mutable_pods() {
  return pods_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::jina::TargetPodProto >*
RoutingTableProto::mutable_pods() {
  // @@protoc_insertion_point(field_mutable_map:jina.RoutingTableProto.pods)
  return _internal_mutable_pods();
}

// string active_pod = 2;
inline void RoutingTableProto::clear_active_pod() {
  active_pod_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoutingTableProto::active_pod() const {
  // @@protoc_insertion_point(field_get:jina.RoutingTableProto.active_pod)
  return _internal_active_pod();
}
inline void RoutingTableProto::set_active_pod(const std::string& value) {
  _internal_set_active_pod(value);
  // @@protoc_insertion_point(field_set:jina.RoutingTableProto.active_pod)
}
inline std::string* RoutingTableProto::mutable_active_pod() {
  // @@protoc_insertion_point(field_mutable:jina.RoutingTableProto.active_pod)
  return _internal_mutable_active_pod();
}
inline const std::string& RoutingTableProto::_internal_active_pod() const {
  return active_pod_.Get();
}
inline void RoutingTableProto::_internal_set_active_pod(const std::string& value) {
  
  active_pod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoutingTableProto::set_active_pod(std::string&& value) {
  
  active_pod_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.RoutingTableProto.active_pod)
}
inline void RoutingTableProto::set_active_pod(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_pod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.RoutingTableProto.active_pod)
}
inline void RoutingTableProto::set_active_pod(const char* value,
    size_t size) {
  
  active_pod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.RoutingTableProto.active_pod)
}
inline std::string* RoutingTableProto::_internal_mutable_active_pod() {
  
  return active_pod_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoutingTableProto::release_active_pod() {
  // @@protoc_insertion_point(field_release:jina.RoutingTableProto.active_pod)
  return active_pod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoutingTableProto::set_allocated_active_pod(std::string* active_pod) {
  if (active_pod != nullptr) {
    
  } else {
    
  }
  active_pod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_pod,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.RoutingTableProto.active_pod)
}

// -------------------------------------------------------------------

// EnvelopeProto_VersionProto

// string jina = 1;
inline void EnvelopeProto_VersionProto::clear_jina() {
  jina_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnvelopeProto_VersionProto::jina() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.VersionProto.jina)
  return _internal_jina();
}
inline void EnvelopeProto_VersionProto::set_jina(const std::string& value) {
  _internal_set_jina(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.VersionProto.jina)
}
inline std::string* EnvelopeProto_VersionProto::mutable_jina() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.VersionProto.jina)
  return _internal_mutable_jina();
}
inline const std::string& EnvelopeProto_VersionProto::_internal_jina() const {
  return jina_.Get();
}
inline void EnvelopeProto_VersionProto::_internal_set_jina(const std::string& value) {
  
  jina_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvelopeProto_VersionProto::set_jina(std::string&& value) {
  
  jina_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.EnvelopeProto.VersionProto.jina)
}
inline void EnvelopeProto_VersionProto::set_jina(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jina_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.EnvelopeProto.VersionProto.jina)
}
inline void EnvelopeProto_VersionProto::set_jina(const char* value,
    size_t size) {
  
  jina_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.EnvelopeProto.VersionProto.jina)
}
inline std::string* EnvelopeProto_VersionProto::_internal_mutable_jina() {
  
  return jina_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvelopeProto_VersionProto::release_jina() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.VersionProto.jina)
  return jina_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvelopeProto_VersionProto::set_allocated_jina(std::string* jina) {
  if (jina != nullptr) {
    
  } else {
    
  }
  jina_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jina,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.VersionProto.jina)
}

// string proto = 2;
inline void EnvelopeProto_VersionProto::clear_proto() {
  proto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnvelopeProto_VersionProto::proto() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.VersionProto.proto)
  return _internal_proto();
}
inline void EnvelopeProto_VersionProto::set_proto(const std::string& value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.VersionProto.proto)
}
inline std::string* EnvelopeProto_VersionProto::mutable_proto() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.VersionProto.proto)
  return _internal_mutable_proto();
}
inline const std::string& EnvelopeProto_VersionProto::_internal_proto() const {
  return proto_.Get();
}
inline void EnvelopeProto_VersionProto::_internal_set_proto(const std::string& value) {
  
  proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvelopeProto_VersionProto::set_proto(std::string&& value) {
  
  proto_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.EnvelopeProto.VersionProto.proto)
}
inline void EnvelopeProto_VersionProto::set_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.EnvelopeProto.VersionProto.proto)
}
inline void EnvelopeProto_VersionProto::set_proto(const char* value,
    size_t size) {
  
  proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.EnvelopeProto.VersionProto.proto)
}
inline std::string* EnvelopeProto_VersionProto::_internal_mutable_proto() {
  
  return proto_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvelopeProto_VersionProto::release_proto() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.VersionProto.proto)
  return proto_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvelopeProto_VersionProto::set_allocated_proto(std::string* proto) {
  if (proto != nullptr) {
    
  } else {
    
  }
  proto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.VersionProto.proto)
}

// string vcs = 3;
inline void EnvelopeProto_VersionProto::clear_vcs() {
  vcs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnvelopeProto_VersionProto::vcs() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.VersionProto.vcs)
  return _internal_vcs();
}
inline void EnvelopeProto_VersionProto::set_vcs(const std::string& value) {
  _internal_set_vcs(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.VersionProto.vcs)
}
inline std::string* EnvelopeProto_VersionProto::mutable_vcs() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.VersionProto.vcs)
  return _internal_mutable_vcs();
}
inline const std::string& EnvelopeProto_VersionProto::_internal_vcs() const {
  return vcs_.Get();
}
inline void EnvelopeProto_VersionProto::_internal_set_vcs(const std::string& value) {
  
  vcs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvelopeProto_VersionProto::set_vcs(std::string&& value) {
  
  vcs_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.EnvelopeProto.VersionProto.vcs)
}
inline void EnvelopeProto_VersionProto::set_vcs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vcs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.EnvelopeProto.VersionProto.vcs)
}
inline void EnvelopeProto_VersionProto::set_vcs(const char* value,
    size_t size) {
  
  vcs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.EnvelopeProto.VersionProto.vcs)
}
inline std::string* EnvelopeProto_VersionProto::_internal_mutable_vcs() {
  
  return vcs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvelopeProto_VersionProto::release_vcs() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.VersionProto.vcs)
  return vcs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvelopeProto_VersionProto::set_allocated_vcs(std::string* vcs) {
  if (vcs != nullptr) {
    
  } else {
    
  }
  vcs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vcs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.VersionProto.vcs)
}

// -------------------------------------------------------------------

// EnvelopeProto_CompressConfigProto

// string algorithm = 1;
inline void EnvelopeProto_CompressConfigProto::clear_algorithm() {
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnvelopeProto_CompressConfigProto::algorithm() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.CompressConfigProto.algorithm)
  return _internal_algorithm();
}
inline void EnvelopeProto_CompressConfigProto::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.CompressConfigProto.algorithm)
}
inline std::string* EnvelopeProto_CompressConfigProto::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.CompressConfigProto.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& EnvelopeProto_CompressConfigProto::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void EnvelopeProto_CompressConfigProto::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvelopeProto_CompressConfigProto::set_algorithm(std::string&& value) {
  
  algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.EnvelopeProto.CompressConfigProto.algorithm)
}
inline void EnvelopeProto_CompressConfigProto::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.EnvelopeProto.CompressConfigProto.algorithm)
}
inline void EnvelopeProto_CompressConfigProto::set_algorithm(const char* value,
    size_t size) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.EnvelopeProto.CompressConfigProto.algorithm)
}
inline std::string* EnvelopeProto_CompressConfigProto::_internal_mutable_algorithm() {
  
  return algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvelopeProto_CompressConfigProto::release_algorithm() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.CompressConfigProto.algorithm)
  return algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvelopeProto_CompressConfigProto::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.CompressConfigProto.algorithm)
}

// uint64 min_bytes = 2;
inline void EnvelopeProto_CompressConfigProto::clear_min_bytes() {
  min_bytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnvelopeProto_CompressConfigProto::_internal_min_bytes() const {
  return min_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnvelopeProto_CompressConfigProto::min_bytes() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.CompressConfigProto.min_bytes)
  return _internal_min_bytes();
}
inline void EnvelopeProto_CompressConfigProto::_internal_set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_bytes_ = value;
}
inline void EnvelopeProto_CompressConfigProto::set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_bytes(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.CompressConfigProto.min_bytes)
}

// float min_ratio = 3;
inline void EnvelopeProto_CompressConfigProto::clear_min_ratio() {
  min_ratio_ = 0;
}
inline float EnvelopeProto_CompressConfigProto::_internal_min_ratio() const {
  return min_ratio_;
}
inline float EnvelopeProto_CompressConfigProto::min_ratio() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.CompressConfigProto.min_ratio)
  return _internal_min_ratio();
}
inline void EnvelopeProto_CompressConfigProto::_internal_set_min_ratio(float value) {
  
  min_ratio_ = value;
}
inline void EnvelopeProto_CompressConfigProto::set_min_ratio(float value) {
  _internal_set_min_ratio(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.CompressConfigProto.min_ratio)
}

// .google.protobuf.Struct parameters = 4;
inline bool EnvelopeProto_CompressConfigProto::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool EnvelopeProto_CompressConfigProto::has_parameters() const {
  return _internal_has_parameters();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& EnvelopeProto_CompressConfigProto::_internal_parameters() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& EnvelopeProto_CompressConfigProto::parameters() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.CompressConfigProto.parameters)
  return _internal_parameters();
}
inline void EnvelopeProto_CompressConfigProto::unsafe_arena_set_allocated_parameters(
    PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.EnvelopeProto.CompressConfigProto.parameters)
}
inline PROTOBUF_NAMESPACE_ID::Struct* EnvelopeProto_CompressConfigProto::release_parameters() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* EnvelopeProto_CompressConfigProto::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.CompressConfigProto.parameters)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* EnvelopeProto_CompressConfigProto::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* EnvelopeProto_CompressConfigProto::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.CompressConfigProto.parameters)
  return _internal_mutable_parameters();
}
inline void EnvelopeProto_CompressConfigProto::set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.CompressConfigProto.parameters)
}

// -------------------------------------------------------------------

// EnvelopeProto

// string sender_id = 1;
inline void EnvelopeProto::clear_sender_id() {
  sender_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnvelopeProto::sender_id() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.sender_id)
  return _internal_sender_id();
}
inline void EnvelopeProto::set_sender_id(const std::string& value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.sender_id)
}
inline std::string* EnvelopeProto::mutable_sender_id() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.sender_id)
  return _internal_mutable_sender_id();
}
inline const std::string& EnvelopeProto::_internal_sender_id() const {
  return sender_id_.Get();
}
inline void EnvelopeProto::_internal_set_sender_id(const std::string& value) {
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvelopeProto::set_sender_id(std::string&& value) {
  
  sender_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.EnvelopeProto.sender_id)
}
inline void EnvelopeProto::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.EnvelopeProto.sender_id)
}
inline void EnvelopeProto::set_sender_id(const char* value,
    size_t size) {
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.EnvelopeProto.sender_id)
}
inline std::string* EnvelopeProto::_internal_mutable_sender_id() {
  
  return sender_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvelopeProto::release_sender_id() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.sender_id)
  return sender_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvelopeProto::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  sender_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.sender_id)
}

// string receiver_id = 2;
inline void EnvelopeProto::clear_receiver_id() {
  receiver_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnvelopeProto::receiver_id() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.receiver_id)
  return _internal_receiver_id();
}
inline void EnvelopeProto::set_receiver_id(const std::string& value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.receiver_id)
}
inline std::string* EnvelopeProto::mutable_receiver_id() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.receiver_id)
  return _internal_mutable_receiver_id();
}
inline const std::string& EnvelopeProto::_internal_receiver_id() const {
  return receiver_id_.Get();
}
inline void EnvelopeProto::_internal_set_receiver_id(const std::string& value) {
  
  receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvelopeProto::set_receiver_id(std::string&& value) {
  
  receiver_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.EnvelopeProto.receiver_id)
}
inline void EnvelopeProto::set_receiver_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.EnvelopeProto.receiver_id)
}
inline void EnvelopeProto::set_receiver_id(const char* value,
    size_t size) {
  
  receiver_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.EnvelopeProto.receiver_id)
}
inline std::string* EnvelopeProto::_internal_mutable_receiver_id() {
  
  return receiver_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvelopeProto::release_receiver_id() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.receiver_id)
  return receiver_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvelopeProto::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  receiver_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.receiver_id)
}

// string request_id = 3;
inline void EnvelopeProto::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnvelopeProto::request_id() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.request_id)
  return _internal_request_id();
}
inline void EnvelopeProto::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.request_id)
}
inline std::string* EnvelopeProto::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& EnvelopeProto::_internal_request_id() const {
  return request_id_.Get();
}
inline void EnvelopeProto::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvelopeProto::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.EnvelopeProto.request_id)
}
inline void EnvelopeProto::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.EnvelopeProto.request_id)
}
inline void EnvelopeProto::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.EnvelopeProto.request_id)
}
inline std::string* EnvelopeProto::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvelopeProto::release_request_id() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvelopeProto::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.request_id)
}

// uint32 timeout = 4;
inline void EnvelopeProto::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvelopeProto::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvelopeProto::timeout() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.timeout)
  return _internal_timeout();
}
inline void EnvelopeProto::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
}
inline void EnvelopeProto::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.timeout)
}

// .jina.EnvelopeProto.VersionProto version = 6;
inline bool EnvelopeProto::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool EnvelopeProto::has_version() const {
  return _internal_has_version();
}
inline void EnvelopeProto::clear_version() {
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::jina::EnvelopeProto_VersionProto& EnvelopeProto::_internal_version() const {
  const ::jina::EnvelopeProto_VersionProto* p = version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::EnvelopeProto_VersionProto*>(
      &::jina::_EnvelopeProto_VersionProto_default_instance_);
}
inline const ::jina::EnvelopeProto_VersionProto& EnvelopeProto::version() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.version)
  return _internal_version();
}
inline void EnvelopeProto::unsafe_arena_set_allocated_version(
    ::jina::EnvelopeProto_VersionProto* version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.EnvelopeProto.version)
}
inline ::jina::EnvelopeProto_VersionProto* EnvelopeProto::release_version() {
  
  ::jina::EnvelopeProto_VersionProto* temp = version_;
  version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::EnvelopeProto_VersionProto* EnvelopeProto::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.version)
  
  ::jina::EnvelopeProto_VersionProto* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::jina::EnvelopeProto_VersionProto* EnvelopeProto::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::EnvelopeProto_VersionProto>(GetArena());
    version_ = p;
  }
  return version_;
}
inline ::jina::EnvelopeProto_VersionProto* EnvelopeProto::mutable_version() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.version)
  return _internal_mutable_version();
}
inline void EnvelopeProto::set_allocated_version(::jina::EnvelopeProto_VersionProto* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.version)
}

// string request_type = 7;
inline void EnvelopeProto::clear_request_type() {
  request_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnvelopeProto::request_type() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.request_type)
  return _internal_request_type();
}
inline void EnvelopeProto::set_request_type(const std::string& value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.request_type)
}
inline std::string* EnvelopeProto::mutable_request_type() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.request_type)
  return _internal_mutable_request_type();
}
inline const std::string& EnvelopeProto::_internal_request_type() const {
  return request_type_.Get();
}
inline void EnvelopeProto::_internal_set_request_type(const std::string& value) {
  
  request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvelopeProto::set_request_type(std::string&& value) {
  
  request_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.EnvelopeProto.request_type)
}
inline void EnvelopeProto::set_request_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.EnvelopeProto.request_type)
}
inline void EnvelopeProto::set_request_type(const char* value,
    size_t size) {
  
  request_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.EnvelopeProto.request_type)
}
inline std::string* EnvelopeProto::_internal_mutable_request_type() {
  
  return request_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvelopeProto::release_request_type() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.request_type)
  return request_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvelopeProto::set_allocated_request_type(std::string* request_type) {
  if (request_type != nullptr) {
    
  } else {
    
  }
  request_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.request_type)
}

// bool check_version = 8;
inline void EnvelopeProto::clear_check_version() {
  check_version_ = false;
}
inline bool EnvelopeProto::_internal_check_version() const {
  return check_version_;
}
inline bool EnvelopeProto::check_version() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.check_version)
  return _internal_check_version();
}
inline void EnvelopeProto::_internal_set_check_version(bool value) {
  
  check_version_ = value;
}
inline void EnvelopeProto::set_check_version(bool value) {
  _internal_set_check_version(value);
  // @@protoc_insertion_point(field_set:jina.EnvelopeProto.check_version)
}

// .jina.EnvelopeProto.CompressConfigProto compression = 9;
inline bool EnvelopeProto::_internal_has_compression() const {
  return this != internal_default_instance() && compression_ != nullptr;
}
inline bool EnvelopeProto::has_compression() const {
  return _internal_has_compression();
}
inline void EnvelopeProto::clear_compression() {
  if (GetArena() == nullptr && compression_ != nullptr) {
    delete compression_;
  }
  compression_ = nullptr;
}
inline const ::jina::EnvelopeProto_CompressConfigProto& EnvelopeProto::_internal_compression() const {
  const ::jina::EnvelopeProto_CompressConfigProto* p = compression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::EnvelopeProto_CompressConfigProto*>(
      &::jina::_EnvelopeProto_CompressConfigProto_default_instance_);
}
inline const ::jina::EnvelopeProto_CompressConfigProto& EnvelopeProto::compression() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.compression)
  return _internal_compression();
}
inline void EnvelopeProto::unsafe_arena_set_allocated_compression(
    ::jina::EnvelopeProto_CompressConfigProto* compression) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compression_);
  }
  compression_ = compression;
  if (compression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.EnvelopeProto.compression)
}
inline ::jina::EnvelopeProto_CompressConfigProto* EnvelopeProto::release_compression() {
  
  ::jina::EnvelopeProto_CompressConfigProto* temp = compression_;
  compression_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::EnvelopeProto_CompressConfigProto* EnvelopeProto::unsafe_arena_release_compression() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.compression)
  
  ::jina::EnvelopeProto_CompressConfigProto* temp = compression_;
  compression_ = nullptr;
  return temp;
}
inline ::jina::EnvelopeProto_CompressConfigProto* EnvelopeProto::_internal_mutable_compression() {
  
  if (compression_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::EnvelopeProto_CompressConfigProto>(GetArena());
    compression_ = p;
  }
  return compression_;
}
inline ::jina::EnvelopeProto_CompressConfigProto* EnvelopeProto::mutable_compression() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.compression)
  return _internal_mutable_compression();
}
inline void EnvelopeProto::set_allocated_compression(::jina::EnvelopeProto_CompressConfigProto* compression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete compression_;
  }
  if (compression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compression);
    if (message_arena != submessage_arena) {
      compression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compression, submessage_arena);
    }
    
  } else {
    
  }
  compression_ = compression;
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.compression)
}

// repeated .jina.RouteProto routes = 10;
inline int EnvelopeProto::_internal_routes_size() const {
  return routes_.size();
}
inline int EnvelopeProto::routes_size() const {
  return _internal_routes_size();
}
inline void EnvelopeProto::clear_routes() {
  routes_.Clear();
}
inline ::jina::RouteProto* EnvelopeProto::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto >*
EnvelopeProto::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:jina.EnvelopeProto.routes)
  return &routes_;
}
inline const ::jina::RouteProto& EnvelopeProto::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::jina::RouteProto& EnvelopeProto::routes(int index) const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.routes)
  return _internal_routes(index);
}
inline ::jina::RouteProto* EnvelopeProto::_internal_add_routes() {
  return routes_.Add();
}
inline ::jina::RouteProto* EnvelopeProto::add_routes() {
  // @@protoc_insertion_point(field_add:jina.EnvelopeProto.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto >&
EnvelopeProto::routes() const {
  // @@protoc_insertion_point(field_list:jina.EnvelopeProto.routes)
  return routes_;
}

// .jina.RoutingTableProto routing_table = 13;
inline bool EnvelopeProto::_internal_has_routing_table() const {
  return this != internal_default_instance() && routing_table_ != nullptr;
}
inline bool EnvelopeProto::has_routing_table() const {
  return _internal_has_routing_table();
}
inline void EnvelopeProto::clear_routing_table() {
  if (GetArena() == nullptr && routing_table_ != nullptr) {
    delete routing_table_;
  }
  routing_table_ = nullptr;
}
inline const ::jina::RoutingTableProto& EnvelopeProto::_internal_routing_table() const {
  const ::jina::RoutingTableProto* p = routing_table_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::RoutingTableProto*>(
      &::jina::_RoutingTableProto_default_instance_);
}
inline const ::jina::RoutingTableProto& EnvelopeProto::routing_table() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.routing_table)
  return _internal_routing_table();
}
inline void EnvelopeProto::unsafe_arena_set_allocated_routing_table(
    ::jina::RoutingTableProto* routing_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_table_);
  }
  routing_table_ = routing_table;
  if (routing_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.EnvelopeProto.routing_table)
}
inline ::jina::RoutingTableProto* EnvelopeProto::release_routing_table() {
  
  ::jina::RoutingTableProto* temp = routing_table_;
  routing_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::RoutingTableProto* EnvelopeProto::unsafe_arena_release_routing_table() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.routing_table)
  
  ::jina::RoutingTableProto* temp = routing_table_;
  routing_table_ = nullptr;
  return temp;
}
inline ::jina::RoutingTableProto* EnvelopeProto::_internal_mutable_routing_table() {
  
  if (routing_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::RoutingTableProto>(GetArena());
    routing_table_ = p;
  }
  return routing_table_;
}
inline ::jina::RoutingTableProto* EnvelopeProto::mutable_routing_table() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.routing_table)
  return _internal_mutable_routing_table();
}
inline void EnvelopeProto::set_allocated_routing_table(::jina::RoutingTableProto* routing_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete routing_table_;
  }
  if (routing_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routing_table);
    if (message_arena != submessage_arena) {
      routing_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_table, submessage_arena);
    }
    
  } else {
    
  }
  routing_table_ = routing_table;
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.routing_table)
}

// .jina.StatusProto status = 11;
inline bool EnvelopeProto::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool EnvelopeProto::has_status() const {
  return _internal_has_status();
}
inline void EnvelopeProto::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::jina::StatusProto& EnvelopeProto::_internal_status() const {
  const ::jina::StatusProto* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::StatusProto*>(
      &::jina::_StatusProto_default_instance_);
}
inline const ::jina::StatusProto& EnvelopeProto::status() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.status)
  return _internal_status();
}
inline void EnvelopeProto::unsafe_arena_set_allocated_status(
    ::jina::StatusProto* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.EnvelopeProto.status)
}
inline ::jina::StatusProto* EnvelopeProto::release_status() {
  
  ::jina::StatusProto* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::StatusProto* EnvelopeProto::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.status)
  
  ::jina::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::jina::StatusProto* EnvelopeProto::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::StatusProto>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::jina::StatusProto* EnvelopeProto::mutable_status() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.status)
  return _internal_mutable_status();
}
inline void EnvelopeProto::set_allocated_status(::jina::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.status)
}

// .jina.HeaderProto header = 12;
inline bool EnvelopeProto::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool EnvelopeProto::has_header() const {
  return _internal_has_header();
}
inline void EnvelopeProto::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::jina::HeaderProto& EnvelopeProto::_internal_header() const {
  const ::jina::HeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::HeaderProto*>(
      &::jina::_HeaderProto_default_instance_);
}
inline const ::jina::HeaderProto& EnvelopeProto::header() const {
  // @@protoc_insertion_point(field_get:jina.EnvelopeProto.header)
  return _internal_header();
}
inline void EnvelopeProto::unsafe_arena_set_allocated_header(
    ::jina::HeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.EnvelopeProto.header)
}
inline ::jina::HeaderProto* EnvelopeProto::release_header() {
  
  ::jina::HeaderProto* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::HeaderProto* EnvelopeProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:jina.EnvelopeProto.header)
  
  ::jina::HeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::jina::HeaderProto* EnvelopeProto::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::HeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::jina::HeaderProto* EnvelopeProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:jina.EnvelopeProto.header)
  return _internal_mutable_header();
}
inline void EnvelopeProto::set_allocated_header(::jina::HeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:jina.EnvelopeProto.header)
}

// -------------------------------------------------------------------

// HeaderProto

// string exec_endpoint = 1;
inline void HeaderProto::clear_exec_endpoint() {
  exec_endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HeaderProto::exec_endpoint() const {
  // @@protoc_insertion_point(field_get:jina.HeaderProto.exec_endpoint)
  return _internal_exec_endpoint();
}
inline void HeaderProto::set_exec_endpoint(const std::string& value) {
  _internal_set_exec_endpoint(value);
  // @@protoc_insertion_point(field_set:jina.HeaderProto.exec_endpoint)
}
inline std::string* HeaderProto::mutable_exec_endpoint() {
  // @@protoc_insertion_point(field_mutable:jina.HeaderProto.exec_endpoint)
  return _internal_mutable_exec_endpoint();
}
inline const std::string& HeaderProto::_internal_exec_endpoint() const {
  return exec_endpoint_.Get();
}
inline void HeaderProto::_internal_set_exec_endpoint(const std::string& value) {
  
  exec_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HeaderProto::set_exec_endpoint(std::string&& value) {
  
  exec_endpoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.HeaderProto.exec_endpoint)
}
inline void HeaderProto::set_exec_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exec_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.HeaderProto.exec_endpoint)
}
inline void HeaderProto::set_exec_endpoint(const char* value,
    size_t size) {
  
  exec_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.HeaderProto.exec_endpoint)
}
inline std::string* HeaderProto::_internal_mutable_exec_endpoint() {
  
  return exec_endpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HeaderProto::release_exec_endpoint() {
  // @@protoc_insertion_point(field_release:jina.HeaderProto.exec_endpoint)
  return exec_endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HeaderProto::set_allocated_exec_endpoint(std::string* exec_endpoint) {
  if (exec_endpoint != nullptr) {
    
  } else {
    
  }
  exec_endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exec_endpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.HeaderProto.exec_endpoint)
}

// string target_peapod = 2;
inline void HeaderProto::clear_target_peapod() {
  target_peapod_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HeaderProto::target_peapod() const {
  // @@protoc_insertion_point(field_get:jina.HeaderProto.target_peapod)
  return _internal_target_peapod();
}
inline void HeaderProto::set_target_peapod(const std::string& value) {
  _internal_set_target_peapod(value);
  // @@protoc_insertion_point(field_set:jina.HeaderProto.target_peapod)
}
inline std::string* HeaderProto::mutable_target_peapod() {
  // @@protoc_insertion_point(field_mutable:jina.HeaderProto.target_peapod)
  return _internal_mutable_target_peapod();
}
inline const std::string& HeaderProto::_internal_target_peapod() const {
  return target_peapod_.Get();
}
inline void HeaderProto::_internal_set_target_peapod(const std::string& value) {
  
  target_peapod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HeaderProto::set_target_peapod(std::string&& value) {
  
  target_peapod_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.HeaderProto.target_peapod)
}
inline void HeaderProto::set_target_peapod(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_peapod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.HeaderProto.target_peapod)
}
inline void HeaderProto::set_target_peapod(const char* value,
    size_t size) {
  
  target_peapod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.HeaderProto.target_peapod)
}
inline std::string* HeaderProto::_internal_mutable_target_peapod() {
  
  return target_peapod_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HeaderProto::release_target_peapod() {
  // @@protoc_insertion_point(field_release:jina.HeaderProto.target_peapod)
  return target_peapod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HeaderProto::set_allocated_target_peapod(std::string* target_peapod) {
  if (target_peapod != nullptr) {
    
  } else {
    
  }
  target_peapod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_peapod,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.HeaderProto.target_peapod)
}

// bool no_propagate = 3;
inline void HeaderProto::clear_no_propagate() {
  no_propagate_ = false;
}
inline bool HeaderProto::_internal_no_propagate() const {
  return no_propagate_;
}
inline bool HeaderProto::no_propagate() const {
  // @@protoc_insertion_point(field_get:jina.HeaderProto.no_propagate)
  return _internal_no_propagate();
}
inline void HeaderProto::_internal_set_no_propagate(bool value) {
  
  no_propagate_ = value;
}
inline void HeaderProto::set_no_propagate(bool value) {
  _internal_set_no_propagate(value);
  // @@protoc_insertion_point(field_set:jina.HeaderProto.no_propagate)
}

// -------------------------------------------------------------------

// StatusProto_ExceptionProto

// string name = 1;
inline void StatusProto_ExceptionProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusProto_ExceptionProto::name() const {
  // @@protoc_insertion_point(field_get:jina.StatusProto.ExceptionProto.name)
  return _internal_name();
}
inline void StatusProto_ExceptionProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:jina.StatusProto.ExceptionProto.name)
}
inline std::string* StatusProto_ExceptionProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:jina.StatusProto.ExceptionProto.name)
  return _internal_mutable_name();
}
inline const std::string& StatusProto_ExceptionProto::_internal_name() const {
  return name_.Get();
}
inline void StatusProto_ExceptionProto::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusProto_ExceptionProto::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.StatusProto.ExceptionProto.name)
}
inline void StatusProto_ExceptionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.StatusProto.ExceptionProto.name)
}
inline void StatusProto_ExceptionProto::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.StatusProto.ExceptionProto.name)
}
inline std::string* StatusProto_ExceptionProto::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusProto_ExceptionProto::release_name() {
  // @@protoc_insertion_point(field_release:jina.StatusProto.ExceptionProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusProto_ExceptionProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.StatusProto.ExceptionProto.name)
}

// repeated string args = 2;
inline int StatusProto_ExceptionProto::_internal_args_size() const {
  return args_.size();
}
inline int StatusProto_ExceptionProto::args_size() const {
  return _internal_args_size();
}
inline void StatusProto_ExceptionProto::clear_args() {
  args_.Clear();
}
inline std::string* StatusProto_ExceptionProto::add_args() {
  // @@protoc_insertion_point(field_add_mutable:jina.StatusProto.ExceptionProto.args)
  return _internal_add_args();
}
inline const std::string& StatusProto_ExceptionProto::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& StatusProto_ExceptionProto::args(int index) const {
  // @@protoc_insertion_point(field_get:jina.StatusProto.ExceptionProto.args)
  return _internal_args(index);
}
inline std::string* StatusProto_ExceptionProto::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:jina.StatusProto.ExceptionProto.args)
  return args_.Mutable(index);
}
inline void StatusProto_ExceptionProto::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:jina.StatusProto.ExceptionProto.args)
  args_.Mutable(index)->assign(value);
}
inline void StatusProto_ExceptionProto::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:jina.StatusProto.ExceptionProto.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void StatusProto_ExceptionProto::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jina.StatusProto.ExceptionProto.args)
}
inline void StatusProto_ExceptionProto::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jina.StatusProto.ExceptionProto.args)
}
inline std::string* StatusProto_ExceptionProto::_internal_add_args() {
  return args_.Add();
}
inline void StatusProto_ExceptionProto::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jina.StatusProto.ExceptionProto.args)
}
inline void StatusProto_ExceptionProto::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jina.StatusProto.ExceptionProto.args)
}
inline void StatusProto_ExceptionProto::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jina.StatusProto.ExceptionProto.args)
}
inline void StatusProto_ExceptionProto::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jina.StatusProto.ExceptionProto.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusProto_ExceptionProto::args() const {
  // @@protoc_insertion_point(field_list:jina.StatusProto.ExceptionProto.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusProto_ExceptionProto::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:jina.StatusProto.ExceptionProto.args)
  return &args_;
}

// repeated string stacks = 3;
inline int StatusProto_ExceptionProto::_internal_stacks_size() const {
  return stacks_.size();
}
inline int StatusProto_ExceptionProto::stacks_size() const {
  return _internal_stacks_size();
}
inline void StatusProto_ExceptionProto::clear_stacks() {
  stacks_.Clear();
}
inline std::string* StatusProto_ExceptionProto::add_stacks() {
  // @@protoc_insertion_point(field_add_mutable:jina.StatusProto.ExceptionProto.stacks)
  return _internal_add_stacks();
}
inline const std::string& StatusProto_ExceptionProto::_internal_stacks(int index) const {
  return stacks_.Get(index);
}
inline const std::string& StatusProto_ExceptionProto::stacks(int index) const {
  // @@protoc_insertion_point(field_get:jina.StatusProto.ExceptionProto.stacks)
  return _internal_stacks(index);
}
inline std::string* StatusProto_ExceptionProto::mutable_stacks(int index) {
  // @@protoc_insertion_point(field_mutable:jina.StatusProto.ExceptionProto.stacks)
  return stacks_.Mutable(index);
}
inline void StatusProto_ExceptionProto::set_stacks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:jina.StatusProto.ExceptionProto.stacks)
  stacks_.Mutable(index)->assign(value);
}
inline void StatusProto_ExceptionProto::set_stacks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:jina.StatusProto.ExceptionProto.stacks)
  stacks_.Mutable(index)->assign(std::move(value));
}
inline void StatusProto_ExceptionProto::set_stacks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stacks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jina.StatusProto.ExceptionProto.stacks)
}
inline void StatusProto_ExceptionProto::set_stacks(int index, const char* value, size_t size) {
  stacks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jina.StatusProto.ExceptionProto.stacks)
}
inline std::string* StatusProto_ExceptionProto::_internal_add_stacks() {
  return stacks_.Add();
}
inline void StatusProto_ExceptionProto::add_stacks(const std::string& value) {
  stacks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jina.StatusProto.ExceptionProto.stacks)
}
inline void StatusProto_ExceptionProto::add_stacks(std::string&& value) {
  stacks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jina.StatusProto.ExceptionProto.stacks)
}
inline void StatusProto_ExceptionProto::add_stacks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stacks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jina.StatusProto.ExceptionProto.stacks)
}
inline void StatusProto_ExceptionProto::add_stacks(const char* value, size_t size) {
  stacks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jina.StatusProto.ExceptionProto.stacks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusProto_ExceptionProto::stacks() const {
  // @@protoc_insertion_point(field_list:jina.StatusProto.ExceptionProto.stacks)
  return stacks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusProto_ExceptionProto::mutable_stacks() {
  // @@protoc_insertion_point(field_mutable_list:jina.StatusProto.ExceptionProto.stacks)
  return &stacks_;
}

// string executor = 4;
inline void StatusProto_ExceptionProto::clear_executor() {
  executor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusProto_ExceptionProto::executor() const {
  // @@protoc_insertion_point(field_get:jina.StatusProto.ExceptionProto.executor)
  return _internal_executor();
}
inline void StatusProto_ExceptionProto::set_executor(const std::string& value) {
  _internal_set_executor(value);
  // @@protoc_insertion_point(field_set:jina.StatusProto.ExceptionProto.executor)
}
inline std::string* StatusProto_ExceptionProto::mutable_executor() {
  // @@protoc_insertion_point(field_mutable:jina.StatusProto.ExceptionProto.executor)
  return _internal_mutable_executor();
}
inline const std::string& StatusProto_ExceptionProto::_internal_executor() const {
  return executor_.Get();
}
inline void StatusProto_ExceptionProto::_internal_set_executor(const std::string& value) {
  
  executor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusProto_ExceptionProto::set_executor(std::string&& value) {
  
  executor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.StatusProto.ExceptionProto.executor)
}
inline void StatusProto_ExceptionProto::set_executor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  executor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.StatusProto.ExceptionProto.executor)
}
inline void StatusProto_ExceptionProto::set_executor(const char* value,
    size_t size) {
  
  executor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.StatusProto.ExceptionProto.executor)
}
inline std::string* StatusProto_ExceptionProto::_internal_mutable_executor() {
  
  return executor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusProto_ExceptionProto::release_executor() {
  // @@protoc_insertion_point(field_release:jina.StatusProto.ExceptionProto.executor)
  return executor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusProto_ExceptionProto::set_allocated_executor(std::string* executor) {
  if (executor != nullptr) {
    
  } else {
    
  }
  executor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), executor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.StatusProto.ExceptionProto.executor)
}

// -------------------------------------------------------------------

// StatusProto

// .jina.StatusProto.StatusCode code = 1;
inline void StatusProto::clear_code() {
  code_ = 0;
}
inline ::jina::StatusProto_StatusCode StatusProto::_internal_code() const {
  return static_cast< ::jina::StatusProto_StatusCode >(code_);
}
inline ::jina::StatusProto_StatusCode StatusProto::code() const {
  // @@protoc_insertion_point(field_get:jina.StatusProto.code)
  return _internal_code();
}
inline void StatusProto::_internal_set_code(::jina::StatusProto_StatusCode value) {
  
  code_ = value;
}
inline void StatusProto::set_code(::jina::StatusProto_StatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:jina.StatusProto.code)
}

// string description = 2;
inline void StatusProto::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusProto::description() const {
  // @@protoc_insertion_point(field_get:jina.StatusProto.description)
  return _internal_description();
}
inline void StatusProto::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:jina.StatusProto.description)
}
inline std::string* StatusProto::mutable_description() {
  // @@protoc_insertion_point(field_mutable:jina.StatusProto.description)
  return _internal_mutable_description();
}
inline const std::string& StatusProto::_internal_description() const {
  return description_.Get();
}
inline void StatusProto::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusProto::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.StatusProto.description)
}
inline void StatusProto::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.StatusProto.description)
}
inline void StatusProto::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.StatusProto.description)
}
inline std::string* StatusProto::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusProto::release_description() {
  // @@protoc_insertion_point(field_release:jina.StatusProto.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusProto::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.StatusProto.description)
}

// .jina.StatusProto.ExceptionProto exception = 3;
inline bool StatusProto::_internal_has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline bool StatusProto::has_exception() const {
  return _internal_has_exception();
}
inline void StatusProto::clear_exception() {
  if (GetArena() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
inline const ::jina::StatusProto_ExceptionProto& StatusProto::_internal_exception() const {
  const ::jina::StatusProto_ExceptionProto* p = exception_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::StatusProto_ExceptionProto*>(
      &::jina::_StatusProto_ExceptionProto_default_instance_);
}
inline const ::jina::StatusProto_ExceptionProto& StatusProto::exception() const {
  // @@protoc_insertion_point(field_get:jina.StatusProto.exception)
  return _internal_exception();
}
inline void StatusProto::unsafe_arena_set_allocated_exception(
    ::jina::StatusProto_ExceptionProto* exception) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exception_);
  }
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.StatusProto.exception)
}
inline ::jina::StatusProto_ExceptionProto* StatusProto::release_exception() {
  
  ::jina::StatusProto_ExceptionProto* temp = exception_;
  exception_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::StatusProto_ExceptionProto* StatusProto::unsafe_arena_release_exception() {
  // @@protoc_insertion_point(field_release:jina.StatusProto.exception)
  
  ::jina::StatusProto_ExceptionProto* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::jina::StatusProto_ExceptionProto* StatusProto::_internal_mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::StatusProto_ExceptionProto>(GetArena());
    exception_ = p;
  }
  return exception_;
}
inline ::jina::StatusProto_ExceptionProto* StatusProto::mutable_exception() {
  // @@protoc_insertion_point(field_mutable:jina.StatusProto.exception)
  return _internal_mutable_exception();
}
inline void StatusProto::set_allocated_exception(::jina::StatusProto_ExceptionProto* exception) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete exception_;
  }
  if (exception) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exception);
    if (message_arena != submessage_arena) {
      exception = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:jina.StatusProto.exception)
}

// -------------------------------------------------------------------

// MessageProto

// .jina.EnvelopeProto envelope = 1;
inline bool MessageProto::_internal_has_envelope() const {
  return this != internal_default_instance() && envelope_ != nullptr;
}
inline bool MessageProto::has_envelope() const {
  return _internal_has_envelope();
}
inline void MessageProto::clear_envelope() {
  if (GetArena() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
}
inline const ::jina::EnvelopeProto& MessageProto::_internal_envelope() const {
  const ::jina::EnvelopeProto* p = envelope_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::EnvelopeProto*>(
      &::jina::_EnvelopeProto_default_instance_);
}
inline const ::jina::EnvelopeProto& MessageProto::envelope() const {
  // @@protoc_insertion_point(field_get:jina.MessageProto.envelope)
  return _internal_envelope();
}
inline void MessageProto::unsafe_arena_set_allocated_envelope(
    ::jina::EnvelopeProto* envelope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envelope_);
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.MessageProto.envelope)
}
inline ::jina::EnvelopeProto* MessageProto::release_envelope() {
  
  ::jina::EnvelopeProto* temp = envelope_;
  envelope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::EnvelopeProto* MessageProto::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_release:jina.MessageProto.envelope)
  
  ::jina::EnvelopeProto* temp = envelope_;
  envelope_ = nullptr;
  return temp;
}
inline ::jina::EnvelopeProto* MessageProto::_internal_mutable_envelope() {
  
  if (envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::EnvelopeProto>(GetArena());
    envelope_ = p;
  }
  return envelope_;
}
inline ::jina::EnvelopeProto* MessageProto::mutable_envelope() {
  // @@protoc_insertion_point(field_mutable:jina.MessageProto.envelope)
  return _internal_mutable_envelope();
}
inline void MessageProto::set_allocated_envelope(::jina::EnvelopeProto* envelope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete envelope_;
  }
  if (envelope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(envelope);
    if (message_arena != submessage_arena) {
      envelope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:jina.MessageProto.envelope)
}

// .jina.RequestProto request = 2;
inline bool MessageProto::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool MessageProto::has_request() const {
  return _internal_has_request();
}
inline void MessageProto::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::jina::RequestProto& MessageProto::_internal_request() const {
  const ::jina::RequestProto* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::RequestProto*>(
      &::jina::_RequestProto_default_instance_);
}
inline const ::jina::RequestProto& MessageProto::request() const {
  // @@protoc_insertion_point(field_get:jina.MessageProto.request)
  return _internal_request();
}
inline void MessageProto::unsafe_arena_set_allocated_request(
    ::jina::RequestProto* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.MessageProto.request)
}
inline ::jina::RequestProto* MessageProto::release_request() {
  
  ::jina::RequestProto* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::RequestProto* MessageProto::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:jina.MessageProto.request)
  
  ::jina::RequestProto* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::jina::RequestProto* MessageProto::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::RequestProto>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::jina::RequestProto* MessageProto::mutable_request() {
  // @@protoc_insertion_point(field_mutable:jina.MessageProto.request)
  return _internal_mutable_request();
}
inline void MessageProto::set_allocated_request(::jina::RequestProto* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:jina.MessageProto.request)
}

// -------------------------------------------------------------------

// DocumentArrayProto

// repeated .jina.DocumentProto docs = 1;
inline int DocumentArrayProto::_internal_docs_size() const {
  return docs_.size();
}
inline int DocumentArrayProto::docs_size() const {
  return _internal_docs_size();
}
inline void DocumentArrayProto::clear_docs() {
  docs_.Clear();
}
inline ::jina::DocumentProto* DocumentArrayProto::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:jina.DocumentArrayProto.docs)
  return docs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
DocumentArrayProto::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:jina.DocumentArrayProto.docs)
  return &docs_;
}
inline const ::jina::DocumentProto& DocumentArrayProto::_internal_docs(int index) const {
  return docs_.Get(index);
}
inline const ::jina::DocumentProto& DocumentArrayProto::docs(int index) const {
  // @@protoc_insertion_point(field_get:jina.DocumentArrayProto.docs)
  return _internal_docs(index);
}
inline ::jina::DocumentProto* DocumentArrayProto::_internal_add_docs() {
  return docs_.Add();
}
inline ::jina::DocumentProto* DocumentArrayProto::add_docs() {
  // @@protoc_insertion_point(field_add:jina.DocumentArrayProto.docs)
  return _internal_add_docs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
DocumentArrayProto::docs() const {
  // @@protoc_insertion_point(field_list:jina.DocumentArrayProto.docs)
  return docs_;
}

// -------------------------------------------------------------------

// RequestProto_DataRequestProto

// repeated .jina.DocumentProto docs = 1;
inline int RequestProto_DataRequestProto::_internal_docs_size() const {
  return docs_.size();
}
inline int RequestProto_DataRequestProto::docs_size() const {
  return _internal_docs_size();
}
inline void RequestProto_DataRequestProto::clear_docs() {
  docs_.Clear();
}
inline ::jina::DocumentProto* RequestProto_DataRequestProto::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:jina.RequestProto.DataRequestProto.docs)
  return docs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
RequestProto_DataRequestProto::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:jina.RequestProto.DataRequestProto.docs)
  return &docs_;
}
inline const ::jina::DocumentProto& RequestProto_DataRequestProto::_internal_docs(int index) const {
  return docs_.Get(index);
}
inline const ::jina::DocumentProto& RequestProto_DataRequestProto::docs(int index) const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.DataRequestProto.docs)
  return _internal_docs(index);
}
inline ::jina::DocumentProto* RequestProto_DataRequestProto::_internal_add_docs() {
  return docs_.Add();
}
inline ::jina::DocumentProto* RequestProto_DataRequestProto::add_docs() {
  // @@protoc_insertion_point(field_add:jina.RequestProto.DataRequestProto.docs)
  return _internal_add_docs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
RequestProto_DataRequestProto::docs() const {
  // @@protoc_insertion_point(field_list:jina.RequestProto.DataRequestProto.docs)
  return docs_;
}

// repeated .jina.DocumentProto groundtruths = 2;
inline int RequestProto_DataRequestProto::_internal_groundtruths_size() const {
  return groundtruths_.size();
}
inline int RequestProto_DataRequestProto::groundtruths_size() const {
  return _internal_groundtruths_size();
}
inline void RequestProto_DataRequestProto::clear_groundtruths() {
  groundtruths_.Clear();
}
inline ::jina::DocumentProto* RequestProto_DataRequestProto::mutable_groundtruths(int index) {
  // @@protoc_insertion_point(field_mutable:jina.RequestProto.DataRequestProto.groundtruths)
  return groundtruths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >*
RequestProto_DataRequestProto::mutable_groundtruths() {
  // @@protoc_insertion_point(field_mutable_list:jina.RequestProto.DataRequestProto.groundtruths)
  return &groundtruths_;
}
inline const ::jina::DocumentProto& RequestProto_DataRequestProto::_internal_groundtruths(int index) const {
  return groundtruths_.Get(index);
}
inline const ::jina::DocumentProto& RequestProto_DataRequestProto::groundtruths(int index) const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.DataRequestProto.groundtruths)
  return _internal_groundtruths(index);
}
inline ::jina::DocumentProto* RequestProto_DataRequestProto::_internal_add_groundtruths() {
  return groundtruths_.Add();
}
inline ::jina::DocumentProto* RequestProto_DataRequestProto::add_groundtruths() {
  // @@protoc_insertion_point(field_add:jina.RequestProto.DataRequestProto.groundtruths)
  return _internal_add_groundtruths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::DocumentProto >&
RequestProto_DataRequestProto::groundtruths() const {
  // @@protoc_insertion_point(field_list:jina.RequestProto.DataRequestProto.groundtruths)
  return groundtruths_;
}

// -------------------------------------------------------------------

// RequestProto_ControlRequestProto

// .jina.RequestProto.ControlRequestProto.Command command = 1;
inline void RequestProto_ControlRequestProto::clear_command() {
  command_ = 0;
}
inline ::jina::RequestProto_ControlRequestProto_Command RequestProto_ControlRequestProto::_internal_command() const {
  return static_cast< ::jina::RequestProto_ControlRequestProto_Command >(command_);
}
inline ::jina::RequestProto_ControlRequestProto_Command RequestProto_ControlRequestProto::command() const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.ControlRequestProto.command)
  return _internal_command();
}
inline void RequestProto_ControlRequestProto::_internal_set_command(::jina::RequestProto_ControlRequestProto_Command value) {
  
  command_ = value;
}
inline void RequestProto_ControlRequestProto::set_command(::jina::RequestProto_ControlRequestProto_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:jina.RequestProto.ControlRequestProto.command)
}

// -------------------------------------------------------------------

// RequestProto

// string request_id = 1;
inline void RequestProto::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestProto::request_id() const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.request_id)
  return _internal_request_id();
}
inline void RequestProto::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:jina.RequestProto.request_id)
}
inline std::string* RequestProto::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:jina.RequestProto.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& RequestProto::_internal_request_id() const {
  return request_id_.Get();
}
inline void RequestProto::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestProto::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jina.RequestProto.request_id)
}
inline void RequestProto::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jina.RequestProto.request_id)
}
inline void RequestProto::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jina.RequestProto.request_id)
}
inline std::string* RequestProto::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestProto::release_request_id() {
  // @@protoc_insertion_point(field_release:jina.RequestProto.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestProto::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jina.RequestProto.request_id)
}

// .jina.RequestProto.ControlRequestProto control = 2;
inline bool RequestProto::_internal_has_control() const {
  return body_case() == kControl;
}
inline bool RequestProto::has_control() const {
  return _internal_has_control();
}
inline void RequestProto::set_has_control() {
  _oneof_case_[0] = kControl;
}
inline void RequestProto::clear_control() {
  if (_internal_has_control()) {
    if (GetArena() == nullptr) {
      delete body_.control_;
    }
    clear_has_body();
  }
}
inline ::jina::RequestProto_ControlRequestProto* RequestProto::release_control() {
  // @@protoc_insertion_point(field_release:jina.RequestProto.control)
  if (_internal_has_control()) {
    clear_has_body();
      ::jina::RequestProto_ControlRequestProto* temp = body_.control_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jina::RequestProto_ControlRequestProto& RequestProto::_internal_control() const {
  return _internal_has_control()
      ? *body_.control_
      : *reinterpret_cast< ::jina::RequestProto_ControlRequestProto*>(&::jina::_RequestProto_ControlRequestProto_default_instance_);
}
inline const ::jina::RequestProto_ControlRequestProto& RequestProto::control() const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.control)
  return _internal_control();
}
inline ::jina::RequestProto_ControlRequestProto* RequestProto::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jina.RequestProto.control)
  if (_internal_has_control()) {
    clear_has_body();
    ::jina::RequestProto_ControlRequestProto* temp = body_.control_;
    body_.control_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestProto::unsafe_arena_set_allocated_control(::jina::RequestProto_ControlRequestProto* control) {
  clear_body();
  if (control) {
    set_has_control();
    body_.control_ = control;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.RequestProto.control)
}
inline ::jina::RequestProto_ControlRequestProto* RequestProto::_internal_mutable_control() {
  if (!_internal_has_control()) {
    clear_body();
    set_has_control();
    body_.control_ = CreateMaybeMessage< ::jina::RequestProto_ControlRequestProto >(GetArena());
  }
  return body_.control_;
}
inline ::jina::RequestProto_ControlRequestProto* RequestProto::mutable_control() {
  // @@protoc_insertion_point(field_mutable:jina.RequestProto.control)
  return _internal_mutable_control();
}

// .jina.RequestProto.DataRequestProto data = 3;
inline bool RequestProto::_internal_has_data() const {
  return body_case() == kData;
}
inline bool RequestProto::has_data() const {
  return _internal_has_data();
}
inline void RequestProto::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void RequestProto::clear_data() {
  if (_internal_has_data()) {
    if (GetArena() == nullptr) {
      delete body_.data_;
    }
    clear_has_body();
  }
}
inline ::jina::RequestProto_DataRequestProto* RequestProto::release_data() {
  // @@protoc_insertion_point(field_release:jina.RequestProto.data)
  if (_internal_has_data()) {
    clear_has_body();
      ::jina::RequestProto_DataRequestProto* temp = body_.data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jina::RequestProto_DataRequestProto& RequestProto::_internal_data() const {
  return _internal_has_data()
      ? *body_.data_
      : *reinterpret_cast< ::jina::RequestProto_DataRequestProto*>(&::jina::_RequestProto_DataRequestProto_default_instance_);
}
inline const ::jina::RequestProto_DataRequestProto& RequestProto::data() const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.data)
  return _internal_data();
}
inline ::jina::RequestProto_DataRequestProto* RequestProto::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jina.RequestProto.data)
  if (_internal_has_data()) {
    clear_has_body();
    ::jina::RequestProto_DataRequestProto* temp = body_.data_;
    body_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestProto::unsafe_arena_set_allocated_data(::jina::RequestProto_DataRequestProto* data) {
  clear_body();
  if (data) {
    set_has_data();
    body_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.RequestProto.data)
}
inline ::jina::RequestProto_DataRequestProto* RequestProto::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_body();
    set_has_data();
    body_.data_ = CreateMaybeMessage< ::jina::RequestProto_DataRequestProto >(GetArena());
  }
  return body_.data_;
}
inline ::jina::RequestProto_DataRequestProto* RequestProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable:jina.RequestProto.data)
  return _internal_mutable_data();
}

// .jina.HeaderProto header = 4;
inline bool RequestProto::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RequestProto::has_header() const {
  return _internal_has_header();
}
inline void RequestProto::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::jina::HeaderProto& RequestProto::_internal_header() const {
  const ::jina::HeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::HeaderProto*>(
      &::jina::_HeaderProto_default_instance_);
}
inline const ::jina::HeaderProto& RequestProto::header() const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.header)
  return _internal_header();
}
inline void RequestProto::unsafe_arena_set_allocated_header(
    ::jina::HeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.RequestProto.header)
}
inline ::jina::HeaderProto* RequestProto::release_header() {
  
  ::jina::HeaderProto* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::HeaderProto* RequestProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:jina.RequestProto.header)
  
  ::jina::HeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::jina::HeaderProto* RequestProto::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::HeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::jina::HeaderProto* RequestProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:jina.RequestProto.header)
  return _internal_mutable_header();
}
inline void RequestProto::set_allocated_header(::jina::HeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:jina.RequestProto.header)
}

// .google.protobuf.Struct parameters = 5;
inline bool RequestProto::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool RequestProto::has_parameters() const {
  return _internal_has_parameters();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& RequestProto::_internal_parameters() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& RequestProto::parameters() const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.parameters)
  return _internal_parameters();
}
inline void RequestProto::unsafe_arena_set_allocated_parameters(
    PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.RequestProto.parameters)
}
inline PROTOBUF_NAMESPACE_ID::Struct* RequestProto::release_parameters() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* RequestProto::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:jina.RequestProto.parameters)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* RequestProto::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* RequestProto::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:jina.RequestProto.parameters)
  return _internal_mutable_parameters();
}
inline void RequestProto::set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Struct* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:jina.RequestProto.parameters)
}

// repeated .jina.RouteProto routes = 6;
inline int RequestProto::_internal_routes_size() const {
  return routes_.size();
}
inline int RequestProto::routes_size() const {
  return _internal_routes_size();
}
inline void RequestProto::clear_routes() {
  routes_.Clear();
}
inline ::jina::RouteProto* RequestProto::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:jina.RequestProto.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto >*
RequestProto::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:jina.RequestProto.routes)
  return &routes_;
}
inline const ::jina::RouteProto& RequestProto::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::jina::RouteProto& RequestProto::routes(int index) const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.routes)
  return _internal_routes(index);
}
inline ::jina::RouteProto* RequestProto::_internal_add_routes() {
  return routes_.Add();
}
inline ::jina::RouteProto* RequestProto::add_routes() {
  // @@protoc_insertion_point(field_add:jina.RequestProto.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jina::RouteProto >&
RequestProto::routes() const {
  // @@protoc_insertion_point(field_list:jina.RequestProto.routes)
  return routes_;
}

// .jina.StatusProto status = 7;
inline bool RequestProto::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RequestProto::has_status() const {
  return _internal_has_status();
}
inline void RequestProto::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::jina::StatusProto& RequestProto::_internal_status() const {
  const ::jina::StatusProto* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jina::StatusProto*>(
      &::jina::_StatusProto_default_instance_);
}
inline const ::jina::StatusProto& RequestProto::status() const {
  // @@protoc_insertion_point(field_get:jina.RequestProto.status)
  return _internal_status();
}
inline void RequestProto::unsafe_arena_set_allocated_status(
    ::jina::StatusProto* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jina.RequestProto.status)
}
inline ::jina::StatusProto* RequestProto::release_status() {
  
  ::jina::StatusProto* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jina::StatusProto* RequestProto::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:jina.RequestProto.status)
  
  ::jina::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::jina::StatusProto* RequestProto::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::jina::StatusProto>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::jina::StatusProto* RequestProto::mutable_status() {
  // @@protoc_insertion_point(field_mutable:jina.RequestProto.status)
  return _internal_mutable_status();
}
inline void RequestProto::set_allocated_status(::jina::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:jina.RequestProto.status)
}

inline bool RequestProto::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void RequestProto::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline RequestProto::BodyCase RequestProto::body_case() const {
  return RequestProto::BodyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jina

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::jina::StatusProto_StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jina::StatusProto_StatusCode>() {
  return ::jina::StatusProto_StatusCode_descriptor();
}
template <> struct is_proto_enum< ::jina::RequestProto_ControlRequestProto_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jina::RequestProto_ControlRequestProto_Command>() {
  return ::jina::RequestProto_ControlRequestProto_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_jina_2eproto
